<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Easy Mock</title>
      <link href="/2020/09/19/2020/Easy-Mock/"/>
      <url>/2020/09/19/2020/Easy-Mock/</url>
      
        <content type="html"><![CDATA[<p>国产软件,搜了很多资料好像外国人不是很在意 mock server 这个东西?</p><a id="more"></a><h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><p>小规模的应用,使用 docker 安装完全足够用了,可以参考<a href="/2020/09/15/CentOS常见问题/#docker" title="CentOS常见问题#docker">这里</a></p><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><figure class="highlight shell"><figcaption><span>Docker安装MongoDB</span><a href="https://hub.docker.com/_/mongo" target="_blank" rel="noopener">DockerHub/mongo</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull mongo</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/mongo</span><br><span class="line">5d9821c94847: Pull complete</span><br><span class="line">a610eae58dfc: Pull complete</span><br><span class="line">a40e0eb9f140: Pull complete</span><br><span class="line">3242ba6cef1f: Pull complete</span><br><span class="line">8ade7416f0cf: Pull complete</span><br><span class="line">cd8d2aab224e: Pull complete</span><br><span class="line">9d8c2ff7f392: Pull complete</span><br><span class="line">d29b99c4ab4c: Pull complete</span><br><span class="line">5d1ed7c1266e: Pull complete</span><br><span class="line">77f31d60b382: Pull complete</span><br><span class="line">e328c48077a2: Pull complete</span><br><span class="line">31085c577c4a: Pull complete</span><br><span class="line">Digest: sha256:ebcdb042054d9974c8c3160d761b0bdb39b55115448242de1a5161c124ddb0af</span><br><span class="line">Status: Downloaded newer image for mongo:latest</span><br><span class="line">docker.io/library/mongo:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建并启动docker容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -itd --name mongo -p 27017:27017 mongo --auth</span></span><br><span class="line">46b83cc20eb4c7270cb961ea00a6ac0df6ffdc1ff0ac6921e3eef546e163eb46</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>创建用户</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it mongo mongo admin</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个名为 root,密码为 p@ssw0rd 的用户。</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">  db.createUser(&#123; user:<span class="string">'root'</span>,<span class="built_in">pwd</span>:<span class="string">'p@ssw0rd'</span>,roles:[ &#123; role:<span class="string">'userAdminAnyDatabase'</span>, db: <span class="string">'admin'</span>&#125;]&#125;);</span></span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">"user" : "root",</span><br><span class="line"> "roles" : [</span><br><span class="line">  &#123;</span><br><span class="line">   "role" : "userAdminAnyDatabase",</span><br><span class="line">   "db" : "admin"</span><br><span class="line">  &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 尝试使用上面创建的用户信息进行连接。</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.auth(<span class="string">'root'</span>, <span class="string">'p@ssw0rd'</span>)</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个名为 easymock，密码为 p@ssw0rd 的用户,具备easymock数据库的读写权限</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> db.createUser(&#123; user:<span class="string">'easymock'</span>,<span class="built_in">pwd</span>:<span class="string">'p@ssw0rd'</span>,roles:[<span class="string">"root"</span>]&#125;);</span></span><br><span class="line">Successfully added user: &#123; "user" : "easymock", "roles" : [ "root" ] &#125;</span><br></pre></td></tr></table></figure><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><figure class="highlight shell"><figcaption><span>Docker安装Redis</span><a href="https://hub.docker.com/_/redis" target="_blank" rel="noopener">DockerHub/redis</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull redis</span></span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">d121f8d1c412: Pull complete</span><br><span class="line">2f9874741855: Pull complete</span><br><span class="line">d92da09ebfd4: Pull complete</span><br><span class="line">bdfa64b72752: Pull complete</span><br><span class="line">e748e6f663b9: Pull complete</span><br><span class="line">eb1c8b66e2a1: Pull complete</span><br><span class="line">Digest: sha256:1cfb205a988a9dae5f025c57b92e9643ec0e7ccff6e66bc639d8a5f95bba928c</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">docker.io/library/redis:latest</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -itd --name redis -p 6379:6379 redis</span></span><br><span class="line">997037310c17fb6109a42c3432fa910dc2e20ded8b863a9c572e022cc932f4cf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>使用Redis-Cli登录</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it redis /bin/bash</span></span><br><span class="line">root@997037310c17:/data# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; hkeys all;</span><br><span class="line">(empty array)</span><br></pre></td></tr></table></figure><h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><p>实际测试下来,EasyMock<code>不支持10.x和12.x的node环境</code>,因此需要安装<a href="https://nodejs.org/dist/latest-v8.x/" target="_blank" rel="noopener"><code>8.x</code></a></p><figure class="highlight shell"><figcaption><span>安装NodeJS</span><a href="https://nodejs.org/dist/latest-v8.x/" target="_blank" rel="noopener">nodejs-v8.x-latest</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载压缩包</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://nodejs.org/dist/latest-v8.x/node-v8.17.0-linux-x64.tar.xz</span></span><br><span class="line">--2020-09-20 07:48:29--  https://nodejs.org/dist/latest-v8.x/node-v8.17.0-linux-x64.tar.xz</span><br><span class="line">Resolving nodejs.org (nodejs.org)... 104.20.22.46, 104.20.23.46, 2606:4700:10::6814:172e, ...</span><br><span class="line">Connecting to nodejs.org (nodejs.org)|104.20.22.46|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 11820040 (11M) [application/x-xz]</span><br><span class="line">Saving to: 'node-v8.17.0-linux-x64.tar.xz'</span><br><span class="line"></span><br><span class="line">node-v8.17.0-linux-x64.tar.xz          100%[=========================================================================&gt;]  11.27M  77.9KB/s    in 78s</span><br><span class="line"></span><br><span class="line">2020-09-20 07:49:48 (148 KB/s) - 'node-v8.17.0-linux-x64.tar.xz' saved [11820040/11820040]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xz -d ./node-v8.17.0-linux-x64.tar.xz &amp;&amp; tar -xvf ./node-v8.17.0-linux-x64.tar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更改路径</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mv ./node-v8.17.0-linux-x64 <span class="variable">$HOME</span>/deployment/nodejs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 写入环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat&gt;&gt;<span class="variable">$HOME</span>/.bash_profile&lt;&lt;EOF</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> NODE ENV</span></span><br><span class="line">export NODEPATH=$HOME/deployment/nodejs</span><br><span class="line">export PATH=\$PATH:$NODEPATH/bin</span><br><span class="line">EOF</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新环境变量</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> <span class="variable">$HOME</span>/.bash_profile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> node --version</span></span><br><span class="line">v8.17.0</span><br></pre></td></tr></table></figure><h2 id="安装-EasyMock"><a href="#安装-EasyMock" class="headerlink" title="安装 EasyMock"></a>安装 EasyMock</h2><figure class="highlight shell"><figcaption><span>安装EasyMock</span><a href="https://github.com/easy-mock/easy-mock" target="_blank" rel="noopener">EasyMock</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/easy-mock/easy-mock.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> easy-mock &amp;&amp; npm install</span></span><br><span class="line">npm WARN ajv-keywords@2.1.1 requires a peer of ajv@^5.0.0 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN easy-mock@1.6.0 No repository field.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.1.3 (node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.1.3: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"linux","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">audited 1820 packages in 18.413s</span><br><span class="line">found 1850 vulnerabilities (928 low, 140 moderate, 780 high, 2 critical)</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` for details</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>修改配置文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"port"</span>: <span class="number">7300</span>,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"pageSize"</span>: <span class="number">30</span>,</span><br><span class="line">  <span class="attr">"proxy"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// "db": "mongodb://admin:'p@ssw0rd'@localhost:27017/easy-mock",</span></span><br><span class="line">  <span class="attr">"db"</span>: <span class="string">"mongodb://localhost/easy-mock"</span>,</span><br><span class="line">  <span class="attr">"unsplashClientId"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"redis"</span>: &#123;</span><br><span class="line">    <span class="attr">"keyPrefix"</span>: <span class="string">"[Easy Mock]"</span>,</span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">6379</span>,</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"db"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"blackList"</span>: &#123;</span><br><span class="line">    <span class="attr">"projects"</span>: [], <span class="comment">// projectId，例："5a4495e16ef711102113e500"</span></span><br><span class="line">    <span class="attr">"ips"</span>: [] <span class="comment">// ip，例："127.0.0.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"rateLimit"</span>: &#123;</span><br><span class="line">    <span class="comment">// https://github.com/koajs/ratelimit</span></span><br><span class="line">    <span class="attr">"max"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"duration"</span>: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"jwt"</span>: &#123;</span><br><span class="line">    <span class="attr">"expire"</span>: <span class="string">"14 days"</span>,</span><br><span class="line">    <span class="attr">"secret"</span>: <span class="string">"shared-secret"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"upload"</span>: &#123;</span><br><span class="line">    <span class="attr">"types"</span>: [<span class="string">".jpg"</span>, <span class="string">".jpeg"</span>, <span class="string">".png"</span>, <span class="string">".gif"</span>, <span class="string">".json"</span>, <span class="string">".yml"</span>, <span class="string">".yaml"</span>],</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">5242880</span>,</span><br><span class="line">    <span class="attr">"dir"</span>: <span class="string">"../public/upload"</span>,</span><br><span class="line">    <span class="attr">"expire"</span>: &#123;</span><br><span class="line">      <span class="attr">"types"</span>: [<span class="string">".json"</span>, <span class="string">".yml"</span>, <span class="string">".yaml"</span>],</span><br><span class="line">      <span class="attr">"day"</span>: <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ldap"</span>: &#123;</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">""</span>, <span class="comment">// 设置 server 代表启用 LDAP 登录。例："ldap://localhost:389" 或 "ldaps://localhost:389"（使用 SSL）</span></span><br><span class="line">    <span class="attr">"bindDN"</span>: <span class="string">""</span>, <span class="comment">// 用户名，例："cn=admin,dc=example,dc=com"</span></span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"filter"</span>: &#123;</span><br><span class="line">      <span class="attr">"base"</span>: <span class="string">""</span>, <span class="comment">// 查询用户的路径，例："dc=example,dc=com"</span></span><br><span class="line">      <span class="attr">"attributeName"</span>: <span class="string">""</span> <span class="comment">// 查询字段，例："mail"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"fe"</span>: &#123;</span><br><span class="line">    <span class="attr">"copyright"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"storageNamespace"</span>: <span class="string">"easy-mock_"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>: <span class="number">25000</span>,</span><br><span class="line">    <span class="attr">"publicPath"</span>: <span class="string">"/dist/"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><figcaption><span>运行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装pm2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install -g --registry=http://registry.npm.taobao.org/ pm2</span></span><br><span class="line">/home/centos/deployment/nodejs/bin/pm2 -&gt; /home/centos/deployment/nodejs/lib/node_modules/pm2/bin/pm2</span><br><span class="line">/home/centos/deployment/nodejs/bin/pm2-docker -&gt; /home/centos/deployment/nodejs/lib/node_modules/pm2/bin/pm2-docker</span><br><span class="line">/home/centos/deployment/nodejs/bin/pm2-dev -&gt; /home/centos/deployment/nodejs/lib/node_modules/pm2/bin/pm2-dev</span><br><span class="line">/home/centos/deployment/nodejs/bin/pm2-runtime -&gt; /home/centos/deployment/nodejs/lib/node_modules/pm2/bin/pm2-runtime</span><br><span class="line">npm WARN notsup Unsupported engine for mkdirp@1.0.4: wanted: &#123;"node":"&gt;=10"&#125; (current: &#123;"node":"8.17.0","npm":"6.13.4"&#125;)</span><br><span class="line">npm WARN notsup Not compatible with your version of node/npm: mkdirp@1.0.4</span><br><span class="line">npm WARN notsup Unsupported engine for semver@7.3.2: wanted: &#123;"node":"&gt;=10"&#125; (current: &#123;"node":"8.17.0","npm":"6.13.4"&#125;)</span><br><span class="line">npm WARN notsup Not compatible with your version of node/npm: semver@7.3.2</span><br><span class="line">npm WARN notsup Unsupported engine for semver@7.2.3: wanted: &#123;"node":"&gt;=10"&#125; (current: &#123;"node":"8.17.0","npm":"6.13.4"&#125;)</span><br><span class="line">npm WARN notsup Not compatible with your version of node/npm: semver@7.2.3</span><br><span class="line">npm WARN ws@7.2.5 requires a peer of bufferutil@^4.0.1 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN ws@7.2.5 requires a peer of utf-8-validate@^5.0.2 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.1.3 (node_modules/pm2/node_modules/fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.1.3: wanted &#123;"os":"darwin","arch":"any"&#125; (current: &#123;"os":"linux","arch":"x64"&#125;)</span><br><span class="line"></span><br><span class="line">+ pm2@4.4.1</span><br><span class="line">added 186 packages from 191 contributors in 16.098s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 编译项目</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run build</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> NODE_ENV=production pm2 start app.js</span></span><br></pre></td></tr></table></figure><!--  –&gt;-->]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CentOS常见问题</title>
      <link href="/2020/09/15/2020/CentOS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/15/2020/CentOS%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>记录一些比较反直觉的问题,以后可以快速检索解决</p><a id="more"></a><h2 id="配置-authorized-keys-之后无法免密码登录"><a href="#配置-authorized-keys-之后无法免密码登录" class="headerlink" title="配置 authorized_keys 之后无法免密码登录"></a>配置 authorized_keys 之后无法免密码登录</h2><p>通常是由于 authorized_keys 文件权限问题导致的</p><p>配置文件<code>/etc/ssh/sshd_config</code>,配置项都比较常规,有两个权限要注意</p><figure class="highlight zsh"><figcaption><span>修改权限</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rw</span></span><br><span class="line">chmod 600 .ssh/authorized_keys</span><br><span class="line"><span class="comment"># rwx</span></span><br><span class="line">chmod 700 .ssh</span><br></pre></td></tr></table></figure><p>修改文件访问权限之后正常</p><h2 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h2><p>例如用户名为 zhangsan</p><figure class="highlight zsh"><figcaption><span>创建超级管理员</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line">adduser zhangsan</span><br><span class="line"><span class="comment"># 创建密码</span></span><br><span class="line">passwd zhangsan</span><br><span class="line"><span class="comment"># 获取超级管理员文件路径</span></span><br><span class="line">whereis sudoers</span><br><span class="line"><span class="comment"># sudoers: /etc/sudoers.d /etc/sudoers /usr/share/man/man5/sudoers.5.gz</span></span><br><span class="line"><span class="comment"># 赋予管理员配置文件写入权限</span></span><br><span class="line">chmod u+w /etc/sudoers</span><br><span class="line"><span class="comment"># 编辑后保存</span></span><br><span class="line"><span class="comment"># 删除配置文件的写入权限</span></span><br><span class="line">chmod u-x /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight"><figcaption><span>/etc/sudoers</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Next comes the main part: which users can run what software on</span></span><br><span class="line"><span class="comment">## which machines (the sudoers file can be shared between multiple</span></span><br><span class="line"><span class="comment">## systems).</span></span><br><span class="line"><span class="comment">## Syntax:</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">##      user    MACHINE=COMMANDS</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## The COMMANDS section may have other options added to it.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Allow root to run any commands anywhere</span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line">centos  ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><h2 id="清华镜像"><a href="#清华镜像" class="headerlink" title="清华镜像"></a>清华镜像</h2><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>修改<code>/etc/yum.repos.d/CentOS-Base.repo</code></p><figure class="highlight ini"><figcaption><span>/etc/yum.repos.d/CentOS-Base.repo</span><a href="https://mirrors.tuna.tsinghua.edu.cn/help/centos/" target="_blank" rel="noopener">CentOS镜像使用帮助</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS-Base.repo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The mirror system uses the connecting IP address of the client and the</span></span><br><span class="line"><span class="comment"># update status of each mirror to pick mirrors that are updated to and</span></span><br><span class="line"><span class="comment"># geographically close to the client.  You should use this for CentOS updates</span></span><br><span class="line"><span class="comment"># unless you are manually picking other mirrors.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If the mirrorlist= does not work for you, as a fall back you can try the</span></span><br><span class="line"><span class="comment"># remarked out baseurl= line instead.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">[BaseOS]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Base</span><br><span class="line"><span class="attr">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/BaseOS/<span class="variable">$basearch</span>/os/</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=BaseOS&amp;infra=$infra</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos<span class="literal">off</span>icial</span><br><span class="line"></span><br><span class="line"><span class="section">[AppStream]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - AppStream</span><br><span class="line"><span class="attr">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/AppStream/<span class="variable">$basearch</span>/os/</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=AppStream&amp;infra=$infra</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos<span class="literal">off</span>icial</span><br><span class="line"></span><br><span class="line"><span class="section">[PowerTools]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - PowerTools</span><br><span class="line"><span class="attr">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/PowerTools/<span class="variable">$basearch</span>/os/</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=PowerTools&amp;infra=$infra</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos<span class="literal">off</span>icial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that may be useful</span></span><br><span class="line"><span class="section">[extras]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Extras</span><br><span class="line"><span class="attr">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/extras/<span class="variable">$basearch</span>/os/</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos<span class="literal">off</span>icial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#additional packages that extend functionality of existing packages</span></span><br><span class="line"><span class="section">[centosplus]</span></span><br><span class="line"><span class="attr">name</span>=CentOS-<span class="variable">$releasever</span> - Plus</span><br><span class="line"><span class="attr">baseurl</span>=https://mirrors.tuna.tsinghua.edu.cn/centos/<span class="variable">$releasever</span>/centosplus/<span class="variable">$basearch</span>/os/</span><br><span class="line"><span class="comment">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=centosplus</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">0</span></span><br><span class="line"><span class="attr">gpgkey</span>=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos<span class="literal">off</span>icial</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>清除yum缓存</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除缓存</span></span><br><span class="line">$ sudo yum makecache</span><br></pre></td></tr></table></figure><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight zsh"><figcaption><span>配置Docker源镜像</span><a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/" target="_blank" rel="noopener">Docker Community Edition 镜像使用帮助</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除之前安装的软件</span></span><br><span class="line">$ sudo yum remove docker docker-common docker-selinux docker-engine</span><br><span class="line"><span class="comment"># 官方删除</span></span><br><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 根据发行版下载repo文件</span></span><br><span class="line">$ wget -O /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 替换仓库地址</span></span><br><span class="line">$ sudo sed -i <span class="string">'s+download.docker.com+mirrors.tuna.tsinghua.edu.cn/docker-ce+'</span> /etc/yum.repos.d/docker-ce.repo</span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line">$ sudo yum makecache fast</span><br><span class="line">$ sudo yum install docker-ce --nobest -y</span><br><span class="line"><span class="comment"># $ sudo dnf install docker-ce --nobest -y</span></span><br><span class="line"><span class="comment"># $ sudo yum install docker-ce</span></span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>到此为止,非 root 用户在执行<code>docker</code>命令时会遇到权限不足的情况,需要在 docker 用户组中添加当前用户</p><figure class="highlight shell"><figcaption><span>添加用户到Docker分组</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.40/containers/json: dial unix /var/run/docker.sock: connect: permission denied</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo groupadd docker <span class="comment">#添加docker用户组</span></span></span><br><span class="line">groupadd: group 'docker' already exists</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo gpasswd -a <span class="variable">$USER</span> docker <span class="comment">#将登陆用户加入到docker用户组中</span></span></span><br><span class="line">[sudo] password for centos:</span><br><span class="line">Adding user centos to group docker</span><br><span class="line"><span class="meta">$</span><span class="bash"> newgrp docker <span class="comment">#更新用户组</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start docker</span></span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ====</span><br><span class="line">Authentication is required to start 'docker.service'.</span><br><span class="line">Authenticating as: root</span><br><span class="line">Password:</span><br><span class="line">==== AUTHENTICATION COMPLETE ====</span><br><span class="line"><span class="meta">$</span><span class="bash"> docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br></pre></td></tr></table></figure><h4 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加网易源</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vi /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">    "registry-mirrors": [ "https://hub-mirror.c.163.com/",</span><br><span class="line">                          "https://registry.docker-cn.com/",</span><br><span class="line">                          "https://dockerhub.azk8s.cn/",</span><br><span class="line">                          "https://docker.mirrors.ustc.edu.cn/",</span><br><span class="line">                          "https://mirror.ccs.tencentyun.com/"]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>提供方</th><th>地址</th></tr></thead><tbody><tr><td>网易</td><td><code>https://hub-mirror.c.163.com</code></td></tr><tr><td>docker 中国</td><td><code>https://registry.docker-cn.com</code></td></tr><tr><td>Azure</td><td><code>https://dockerhub.azk8s.cn</code></td></tr><tr><td>中科大</td><td><code>https://docker.mirrors.ustc.edu.cn</code></td></tr><tr><td>腾讯云</td><td><code>https://mirror.ccs.tencentyun.com</code></td></tr></tbody></table><h2 id="dnf"><a href="#dnf" class="headerlink" title="dnf"></a>dnf</h2><p><a href="https://man.linuxde.net/dnf" target="_blank" rel="noopener">dnf</a>是新一代的 rpm 软件包管理工具,据说将会取代 yum.</p><p>DNF 包管理器克服了 YUM 包管理器的一些瓶颈，提升了包括用户体验，内存占用，依赖分析，运行速度等多方面的内容。DNF 使用 RPM, libsolv 和 hawkey 库进行包管理操作。尽管它没有预装在 CentOS 和 RHEL 7 中，但你可以在使用 YUM 的同时使用 DNF 。你可以在这里获得关于 DNF 的更多知识：<a href="http://www.tecmint.com/dnf-next-generation-package-management-utility-for-linux/" target="_blank" rel="noopener">《 DNF 代替 YUM ，你所不知道的缘由》</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Airflow</title>
      <link href="/2020/09/13/2020/Airflow/"/>
      <url>/2020/09/13/2020/Airflow/</url>
      
        <content type="html"><![CDATA[<p>Airflow是一个社区创建的平台,用于以编程的方式创作,调度和监控工作流.</p><a id="more"></a><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul><li>可伸缩,Airflow拥有模块化的架构,通过一个消息队列来编排任意数量的worker,具备无限扩展的能力.</li><li>动态性,Airflow管道通过Python代码配置,可以动态生成管道,可以动态实例化管道代码.</li><li>可扩展,可以轻松的定义自己的运算符,执行程序并且扩展代码库,适用于抽象级别的环境适配.</li><li>优雅,Airflow管道简单易用,使用强大的Jinja模板引擎使得脚本可以实现参数化.</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="纯Python"><a href="#纯Python" class="headerlink" title="纯Python"></a>纯Python</h3><blockquote><p>没有命令行或者xml的黑魔法.<br>使用完整的Python特性来创建您的工作流.<br>使用时间格式来调度任务,使用循环动态的创建任务,从而允许用户完全按照自己的意愿创建工作流.</p></blockquote><h3 id="有用的界面"><a href="#有用的界面" class="headerlink" title="有用的界面"></a>有用的界面</h3><blockquote><p>使用Web应用来监控,调度和管理工作流.<br>无需学习陈旧的类cron接口.<br>通过洞悉日志实现洞悉已完成和正在进行的任务状态.</p></blockquote><h3 id="丰富的集成"><a href="#丰富的集成" class="headerlink" title="丰富的集成"></a>丰富的集成</h3><blockquote><p>Airflow提供了很多即插即用的运算符,可以立即用与管理Google CloudPlatform,Amazon Web Services,Microsoft Azure和其他的云服务中的任务.<br>这使得Airflow可以很方便的集成到现有的基础架构中.</p></blockquote><h3 id="易用"><a href="#易用" class="headerlink" title="易用"></a>易用</h3><blockquote><p>任何具有Python知识的人都可以部署工作流.<br>Apache Airflow不限制管道的范围,你可以用它来构建机器学习模型,交换数据或者管理基础架构.</p></blockquote><h3 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h3><blockquote><p>您可以通过打开PR来分享自己的改进.<br>简单,没有阻碍,没有冗长的过程.<br>Airflow有许多活跃的用户愿意分享他们的经验.</p></blockquote><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><blockquote><p>使用Airflow来编写由不同任务组成的DAG(有向无环图)工作流.<br>Airflow调度器会根据指定的依赖关系在一系列worker节点上执行任务.<br>丰富的命令行工具使得在DAG上执行复杂的手术变得轻而易举.<br>丰富的UI使得查看生产中运行的管道,监控进度和排除故障变得容易.</p></blockquote><p>将工作流定义为代码时,它们将变得更加易于维护,版本化,易于测试和协作.</p><h3 id="Beyond-the-Horizon"><a href="#Beyond-the-Horizon" class="headerlink" title="Beyond the Horizon"></a>Beyond the Horizon</h3><blockquote><p>Airflow不是数据流解决方案.<br>任务不会将数据在任务见传递(尽管任务可以交换元数据).<br>Airflow不属于Spark Streaming或者Storm的范畴,它更类似于Oozie或者Azkaban.<br>工作流通常被认为是静态的或者是缓慢变化的.<br>可以认为工作流中的任务结构比数据库结构的动态性更强.<br>Airflow工作流被认为是任务的连续执行过程,使得工作单元的连续性变得更清晰.</p></blockquote><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>Airflow的安装十分快速和直接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># airflow needs a home, ~/airflow is the default,</span></span><br><span class="line"><span class="comment"># but you can lay foundation somewhere else if you prefer</span></span><br><span class="line"><span class="comment"># (optional)</span></span><br><span class="line"><span class="comment"># airflow需要一个主目录,默认是~/airflow,也可以根据喜好修改(可选)</span></span><br><span class="line"><span class="built_in">export</span> AIRFLOW_HOME=~/airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># install from pypi using pip</span></span><br><span class="line"><span class="comment"># 通过pip在pypi上安装</span></span><br><span class="line">pip install apache-airflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># initialize the database</span></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">airflow initdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># start the web server, default port is 8080</span></span><br><span class="line"><span class="comment"># 启动web服务,默认端口为8080</span></span><br><span class="line">airflow webserver -p 8080</span><br><span class="line"></span><br><span class="line"><span class="comment"># start the scheduler</span></span><br><span class="line"><span class="comment"># 开启调度器</span></span><br><span class="line">airflow scheduler</span><br><span class="line"></span><br><span class="line"><span class="comment"># visit localhost:8080 in the browser and enable the example dag in the home page</span></span><br><span class="line"><span class="comment"># 通过浏览器浏览http://localhost:8080</span></span><br><span class="line"><span class="comment"># 并且在主页中开启示例DAG</span></span><br></pre></td></tr></table></figure><p>通过执行上述命令,Airflow将会创建<code>$AIRFLOW_HOME</code>文件夹并且放置一个带有默认设置的<code>airflow.cfg</code>文件,使得用户可以快速入门.<br>可以通过<code>$AIRFLOW_HOME/airflow.cfg</code>或者WebUI中的<code>Admin-Configuration</code>来观察配置文件.<br>web服务器的PID文件存储在<code>$AIRFLOW_HOME/airflow-webserver.pid</code>.<br>当web服务器由systemd启动时,PID文件存储在<code>/run/airflow/webserver.pid</code>路径.</p><p>除此之外,Airflow使用sqlite数据库,由于使用此数据库不具备并行能力.<br>Airflow与<code>airflow.executors.sequential_executor.SequentialExecutor</code>结合使用,后者只用于顺序运行任务实例.</p><p>这里有一些触发任务实例的命令.<br>运行以下命令时应该可以在example1的DAG中查看作业的状态变更.</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run your first task instance</span></span><br><span class="line">airflow run example_bash_operator runme_0 2020-09-13</span><br><span class="line"><span class="comment"># run a backfill over 2 days</span></span><br><span class="line">airflow backfill example_bash_operator -s 2020-09-13 -e 2020-09-14</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Workflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azkaban</title>
      <link href="/2020/09/13/2020/Azkaban/"/>
      <url>/2020/09/13/2020/Azkaban/</url>
      
        <content type="html"><![CDATA[<p>Azkaban 是一款由领英创建,用于 Hadoop 任务场景的分布式批量工作流任务调度工具.Azkaban 解决了任务依赖循序的问题,并且提供了简单易用的 WebUI 接口,用于维护和跟踪您的工作流.</p><a id="more"></a><p>Azkaban 具有以下特性</p><ul><li>适用于任意版本的 Hadoop</li><li>简单易用的 WebUI</li><li>便捷的基于 web/http 的工作流上传功能</li><li>项目工作空间</li><li>工作流调度</li><li>模块化和插件化</li><li>授权和认证</li><li>追踪用户行为</li><li>失败/成功的邮件提醒</li><li>SLA 报警以及自动取消</li><li>失败任务重试</li></ul><p>Azkaban 在设计时主要考虑到易用性.它在领英已经使用了一些年份,驱动了公司的很多 Hadoop 和数据仓库处理工作.</p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>Azkaban 3.0 之后的版本提供两种模式:</p><ol><li><code>solo-server</code>模式,基于嵌入的<code>H2</code>数据库,web 服务器和执行服务器在同一个进程中运行,适用于学习研究场景,同样适用于小规模的用户案例.</li><li>分布式多执行者(<code>distributed multiple-executor</code>)模式,基于主从模式的 MySQL 数据库,web 服务器和执行服务器分别在不同的服务器上运行,这样升级和维护工作将不会影响用户,多服务器的配置使得 Azkaban 系统具备了更高的鲁棒性和扩展能力.</li></ol><p>部署通常分为以下步骤:</p><ul><li>配置数据库</li><li>配置用于多执行者的数据库</li><li>下载并在数据中配置的每个执行者服务器上安装<code>Executor Server</code></li><li>安装 Azkaban 插件</li><li>安装 Web 服务</li></ul><p>下面将为大家介绍如何配置 Azkaban</p><h2 id="从源码编译"><a href="#从源码编译" class="headerlink" title="从源码编译"></a>从源码编译</h2><p>Azkaban 的编译使用 Gradle 工具,需要 Java8 以上的版本</p><p>在<code>*nix</code>设备上执行下列命令(例如 Linux/MacOS)</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build Azkaben</span></span><br><span class="line">./gradlew build</span><br><span class="line"></span><br><span class="line"><span class="comment"># Clean the build</span></span><br><span class="line">./gradlew clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build and install distributions</span></span><br><span class="line">./gradlew installDist</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run tests</span></span><br><span class="line">./gradlew <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build without running tests</span></span><br><span class="line">./gradlew build -x <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h3 id="Solo-Server入门"><a href="#Solo-Server入门" class="headerlink" title="Solo Server入门"></a><code>Solo Server</code>入门</h3><p>solo server 是 Azkaban 的单实例独立运行模式,有以下优势:</p><ul><li>易于安装,不需要 MySQL 实例,包含了 H2 作为主要的持久化存储</li><li>易于装配,Web 服务器和执行服务器在同一个进程中运行</li><li>包含全特性,包含了 Azkaban 的完整特性</li></ul><h4 id="安装Solo-Server"><a href="#安装Solo-Server" class="headerlink" title="安装Solo Server"></a>安装<code>Solo Server</code></h4><ul><li>克隆仓库</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/azkaban/azkaban.git</span><br></pre></td></tr></table></figure><ul><li>构建并创建安装包</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> azkaban; ./gradlew build installDist</span><br></pre></td></tr></table></figure><ul><li>启动 solo server</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> azkaban-solo-server/build/install/azkaban-solo-server; bin/start-solo.sh</span><br></pre></td></tr></table></figure><p>Azkaban 独立服务器应该全部配置完成,通过监听默认端口<code>8081</code>的方式接受网络请求.所以,打开浏览器检查<code>http://localhost:8081/</code>.默认的登录用户名密码在配置文件中<code>conf/azkaban.xml</code>配置.</p><p>关闭服务</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/shutdown-solo.sh</span><br></pre></td></tr></table></figure><h2 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h2><p>Azkaban依赖于JavaFX中的包,但是由于OpenJDK默认没有包含,所以默认编译会报错</p><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><p>CentOS环境下,官方的源没有包含openjfx,可以选择手动编译安装,也可以选择安装Oracle JDK(默认包含JavaFX)</p><h3 id="安装OpenJFX"><a href="#安装OpenJFX" class="headerlink" title="安装OpenJFX"></a>安装OpenJFX</h3><p>Ubuntu系统下直接执行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjfx</span><br></pre></td></tr></table></figure><h3 id="添加maven镜像"><a href="#添加maven镜像" class="headerlink" title="添加maven镜像"></a>添加maven镜像</h3><p>编译过程中gradle会去仓库中下载相关依赖,添加aliyun镜像仓库</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">allprojects</span> &#123;</span><br><span class="line">  apply plugin: <span class="string">'jacoco'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">repositories</span> &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">'https://maven.aliyun.com/repository/public'</span></span><br><span class="line">    &#125;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h3><p>Azkaban默认配置为美国/洛杉矶时区,与中国有15个小时的时差,改为亚洲/上海</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># default.timezone.id=America/Los_Angeles</span><br><span class="line">default.timezone.id=Asia/Shanghai</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Workflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EntityFramework</title>
      <link href="/2020/06/07/EntityFramework/"/>
      <url>/2020/06/07/EntityFramework/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-EntityFramework"><a href="#什么是-EntityFramework" class="headerlink" title="什么是 EntityFramework"></a>什么是 EntityFramework</h2><p>EntityFramework 是一款 ORM 框架(对象关系映射 Object Relational Mapping，简称 ORM），可以使.NET 开发人员能够使用特定领域的关系型数据。开发人员无需像往常一样编写大量的数据访问代码。</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><blockquote><p>如果对<code>.Net Core</code>/<code>命令行操作</code>/<code>C#语言</code>一窍不通的建议不用往下看了…</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先安装<a href="https://dotnet.microsoft.com/download" title=".NetCore SDK下载页面" target="_blank" rel="noopener">.NetCore SDK</a>,之后创建一个新的.Net Core 项目,安装<code>EF Core</code></p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的控制台项目,名字叫做"EFGetStarted"</span></span><br><span class="line">dotnet new console -o EFGetStarted</span><br><span class="line"><span class="comment"># 切换到项目路径</span></span><br><span class="line"><span class="built_in">cd</span> EFGetStarted</span><br><span class="line"><span class="comment"># 从NuGet添加相关的包依赖,也可以通过VisualStudio的管理器安装,不赘述</span></span><br><span class="line"><span class="comment"># SQLite</span></span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Sqlite</span><br><span class="line"><span class="comment"># PostgreSQL</span></span><br><span class="line">dotnet add package Npgsql.EntityFrameworkCore.PostgreSQL</span><br><span class="line"><span class="comment"># MSSQL</span></span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.SqlServer</span><br></pre></td></tr></table></figure><h3 id="Code-First"><a href="#Code-First" class="headerlink" title="Code First"></a>Code First</h3><p>示例代码创建了一个简单的博客模型示例,包含了 Blog 和 Post 类的定义,以及 DbContext</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFGetStarted</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BloggingContext</span> : <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Blog&gt; Blogs &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnConfiguring</span>(<span class="params">DbContextOptionsBuilder options</span>)</span></span><br><span class="line"><span class="function"></span>            =&gt; options.UseSqlite(<span class="string">"Data Source=blogging.db"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blog</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Url &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> List&lt;Post&gt; Posts &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> List&lt;Post&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Post</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> PostId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Title &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> BlogId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> Blog Blog &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装dotnet-ef工具</span></span><br><span class="line">dotnet tool install --global dotnet-ef</span><br><span class="line"><span class="comment"># 安装EF设计器</span></span><br><span class="line">dotnet add package Microsoft.EntityFrameworkCore.Design</span><br><span class="line"><span class="comment"># 根据代码创建一个数据库版本</span></span><br><span class="line">dotnet ef migrations add InitialCreate</span><br><span class="line"><span class="comment"># 将数据库版本更新至当前</span></span><br><span class="line">dotnet ef database update</span><br></pre></td></tr></table></figure><p>执行完成上述代码之后,项目中将会多出一个<code>blogging.db</code>文件,是 Sqlite 的数据库文件,其中包含了三张表</p><ul><li><code>Blogs</code>:存储 Blogs 类对象</li><li><code>Posts</code>:存储 Posts 类对象</li><li><code>__EFMigrationsHistory</code>:存储对应的 EF 部署历史信息</li></ul><h3 id="调用数据库方法"><a href="#调用数据库方法" class="headerlink" title="调用数据库方法"></a>调用数据库方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> EFGetStarted.Models;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFGetStarted</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> db = <span class="keyword">new</span> BlogContext())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Create</span></span><br><span class="line">                Console.WriteLine(<span class="string">"Inserting a new blog"</span>);</span><br><span class="line">                db.Add(<span class="keyword">new</span> Blog &#123; Url = <span class="string">"http://blogs.msdn.com/adonet"</span> &#125;);</span><br><span class="line">                db.SaveChanges();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Read</span></span><br><span class="line">                Console.WriteLine(<span class="string">"Querying for a blog"</span>);</span><br><span class="line">                <span class="keyword">var</span> blog = db.Blogs</span><br><span class="line">                    .OrderBy(b =&gt; b.BlogId)</span><br><span class="line">                    .First();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Update</span></span><br><span class="line">                Console.WriteLine(<span class="string">"Updating the blog and adding a post"</span>);</span><br><span class="line">                blog.Url = <span class="string">"https://devblogs.microsoft.com/dotnet"</span>;</span><br><span class="line">                blog.Posts.Add(</span><br><span class="line">                    <span class="keyword">new</span> Post</span><br><span class="line">                    &#123;</span><br><span class="line">                        Title = <span class="string">"Hello World"</span>,</span><br><span class="line">                        Content = <span class="string">"I wrote an app using EF Core!"</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                db.SaveChanges();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Delete</span></span><br><span class="line">                Console.WriteLine(<span class="string">"Delete the blog"</span>);</span><br><span class="line">                db.Remove(blog);</span><br><span class="line">                db.SaveChanges();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含了对数据库的 CRUD 操作,例子到此结束,可以看到全程我们没有进行任何实际的数据库操作,包括:</p><ul><li>设计数据库</li><li>创建数据库及表结构</li><li>使用 client 程序连接数据库</li><li>编写 SQL 进行数据库操作</li></ul><p>这就是 ORM 框架的优点:屏蔽了繁复的数据库操作细节,让用户专注于业务模型的建立</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus</title>
      <link href="/2020/03/15/Prometheus/"/>
      <url>/2020/03/15/Prometheus/</url>
      
        <content type="html"><![CDATA[<h2 id="Prometheus介绍"><a href="#Prometheus介绍" class="headerlink" title="Prometheus介绍"></a>Prometheus介绍</h2><p>Prometheus 是一款开源的系统监控和报警工具包,主要提供了以下功能</p><blockquote><ol><li>多维数据模型,用<code>key-value</code>的方式标识时序数据</li><li>PromQL,利用这种数据类型的灵活的查询语言</li><li>互不相关的分布式存储,单独的服务节点之间互相独立</li><li>通过基于 HTTP 协议的拉取式的时序数据的收集</li><li>支持通过中间件网关的方式推送时序数据</li><li>可以通过静态的配置文件和”服务发现”技术发现监控目标</li><li>丰富的图形化模型和仪表盘支持</li></ol></blockquote><a id="more"></a><p>Prometheus的生态系统包含了丰富的组件,并且很多组件是可选的,可以根据需求灵活搭建</p><blockquote><ol><li>主程序<code>Prometheus Server</code>,用来获取和存储时序数据</li><li>丰富的用于检测应用程序状态的客户端库</li><li>支持短期任务的推送网关</li><li>针对不同服务的<code>exporter</code>服务,例如支持<code>HAProxy/StatsD/Graphite</code>等</li><li>报警管理器,用于报警管理</li><li>丰富的支持工具</li></ol></blockquote><p>程序架构</p><p><img src="prometheus_architecture.png" alt="Prometheus架构图"></p><p>Prometheus直接或者通过中间推送网关收集各种检测指标,它把所有收集到的数据存储到本地,并且根据规则对数据进行聚合,并且记录根据已有的数据记录新的时序数据记录或者是报警.通常,Prometheus使用Grafana来可视化数据.</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下示例都来自官方网站</p><h3 id="安装Prometheus"><a href="#安装Prometheus" class="headerlink" title="安装Prometheus"></a>安装Prometheus</h3><p>首先,在官网下载程序包到指定位置,之后根据命令提示开始解压运行</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解压命令</span></span><br><span class="line">tar xvfz prometheus-*.tar.gz</span><br><span class="line"><span class="comment"># 进入程序目录</span></span><br><span class="line"><span class="built_in">cd</span> prometheus-*</span><br><span class="line"><span class="comment"># 查看帮助信息,说明程序可以正常运行</span></span><br><span class="line">./prometheus --<span class="built_in">help</span></span><br><span class="line">usage: prometheus [&lt;flags&gt;]</span><br><span class="line"></span><br><span class="line">The Prometheus monitoring server</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --<span class="built_in">help</span>                     Show context-sensitive <span class="built_in">help</span> (also try</span><br><span class="line">                                 --<span class="built_in">help</span>-long and --<span class="built_in">help</span>-man).</span><br><span class="line">      --version                  Show application version.</span><br><span class="line">      --config.file=<span class="string">"prometheus.yml"</span>  </span><br><span class="line">                                 Prometheus configuration file path.</span><br><span class="line">      --web.listen-address=<span class="string">"0.0.0.0:9090"</span>  </span><br><span class="line">                                 Address to listen on <span class="keyword">for</span> UI, API, and</span><br><span class="line">                                 telemetry.</span><br></pre></td></tr></table></figure><h3 id="配置Prometheus"><a href="#配置Prometheus" class="headerlink" title="配置Prometheus"></a>配置Prometheus</h3><p>Prometheus程序通过YAML和命令行参数文件进行配置,详细的配置项在使用过程中参考<a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/" title="Prometheus的配置说明" target="_blank" rel="noopener">Prometheus官网的说明文档</a></p><p>命令行参数通常用来配置系统参数,例如存储位置/硬盘和内存的用量等,配置文件通常定义了所有相关的数据收集才做/实例/规则文件等.</p><p>此外,Prometheus运行时可以重载配置,如果配置文件编写有格式错误,则配置项不会生效.重载配置通常通过两种方式:</p><ol><li>SIGHUP进程,例如<code>kill HUP</code></li><li>通过HTTP POST请求<code>/-/reload</code>地址</li></ol><p>Prometheus支持多种服务发现配置,例如常用的Kubernetes/Consul/Static Files方式,可以动态改变监听的内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># my global config 全局配置</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="comment"># 设置数据获取间隔(秒),默认为一分钟</span></span><br><span class="line">  <span class="attr">scrape_interval:</span>     <span class="string">15s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># 规则执行间隔(秒),默认为一分钟</span></span><br><span class="line">  <span class="attr">evaluation_interval:</span> <span class="string">15s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># 数据获取超时时间全局默认设置为10秒</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="comment"># 报警管理配置</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span></span><br><span class="line">      <span class="comment"># 报警服务器的目标地址:端口</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line"><span class="comment"># 加载规则文件,并且根据'evaluation_interval'配置的周期执行</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="comment"># 一个scrape配置包含了一个endpoint</span></span><br><span class="line"><span class="comment"># 默认配置的第一个是Prometheus服务本身的endpoint</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line">  <span class="comment"># job_name将会被作为job=&lt;job_name&gt;的label添加</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line">    <span class="comment"># 指标路径默认为'/metrics'</span></span><br><span class="line">    <span class="comment"># 协议默认为'http'</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['128.1.6.73:9090']</span></span><br></pre></td></tr></table></figure><p>配置文件支持以下几种数据类型定义:</p><ol><li><code>boolean</code>: 布尔值,<code>true/false</code></li><li><code>duration</code>: 持续时间,符合正则表达式规则<code>[0-9]+(ms|[smhdwy])</code></li><li><code>labelname</code>: 字符串,符合正则表达式规则<code>[a-zA-Z_][a-zA-Z0-9_]*</code></li><li><code>labelvalue</code>: unicode字符串</li><li><code>filename</code>: 当前工作目录下的可用路径</li><li><code>host</code>: 可用的主机名/IP地址:端口号</li><li><code>path</code>: 可用的URL路径</li><li><code>scheme</code>: 协议类型,<code>http/https</code></li><li><code>string</code>: 常规字符串</li><li><code>secret</code>: 常规字符串,例如密码/token等</li><li><code>tmpl_string</code>: 模板字符串</li></ol><h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="comment"># How frequently to scrape targets by default.</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">1m</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># How long until a scrape request times out.</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">scrape_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">10s</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># How frequently to evaluate rules.</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">evaluation_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">1m</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The labels to add to any time series or alerts when communicating with</span></span><br><span class="line">  <span class="comment"># external systems (federation, remote storage, Alertmanager).</span></span><br><span class="line">  <span class="attr">external_labels:</span></span><br><span class="line">    <span class="string">[</span> <span class="string">&lt;labelname&gt;:</span> <span class="string">&lt;labelvalue&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># File to which PromQL queries are logged.</span></span><br><span class="line">  <span class="comment"># Reloading the configuration will reopen the file.</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">query_log_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Rule files specifies a list of globs. Rules and alerts are read from</span></span><br><span class="line"><span class="comment"># all matching files.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;filepath_glob&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A list of scrape configurations.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;scrape_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alerting specifies settings related to the Alertmanager.</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line">  <span class="attr">alert_relabel_configs:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line">  <span class="attr">alertmanagers:</span></span><br><span class="line">    <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;alertmanager_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings related to the remote write feature.</span></span><br><span class="line"><span class="attr">remote_write:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;remote_write&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Settings related to the remote read feature.</span></span><br><span class="line"><span class="attr">remote_read:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;remote_read&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><h4 id="scrape"><a href="#scrape" class="headerlink" title="scrape"></a>scrape</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The job name assigned to scraped metrics by default.</span></span><br><span class="line"><span class="attr">job_name:</span> <span class="string">&lt;job_name&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># How frequently to scrape targets from this job.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">scrape_interval:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">&lt;global_config.scrape_interval&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Per-scrape timeout when scraping this job.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">scrape_timeout:</span> <span class="string">&lt;duration&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">&lt;global_config.scrape_timeout&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The HTTP resource path on which to fetch metrics from targets.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">metrics_path:</span> <span class="string">&lt;path&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">/metrics</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># honor_labels controls how Prometheus handles conflicts between labels that are</span></span><br><span class="line"><span class="comment"># already present in scraped data and labels that Prometheus would attach</span></span><br><span class="line"><span class="comment"># server-side ("job" and "instance" labels, manually configured target</span></span><br><span class="line"><span class="comment"># labels, and labels generated by service discovery implementations).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If honor_labels is set to "true", label conflicts are resolved by keeping label</span></span><br><span class="line"><span class="comment"># values from the scraped data and ignoring the conflicting server-side labels.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If honor_labels is set to "false", label conflicts are resolved by renaming</span></span><br><span class="line"><span class="comment"># conflicting labels in the scraped data to "exported_&lt;original-label&gt;" (for</span></span><br><span class="line"><span class="comment"># example "exported_instance", "exported_job") and then attaching server-side</span></span><br><span class="line"><span class="comment"># labels.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Setting honor_labels to "true" is useful for use cases such as federation and</span></span><br><span class="line"><span class="comment"># scraping the Pushgateway, where all labels specified in the target should be</span></span><br><span class="line"><span class="comment"># preserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that any globally configured "external_labels" are unaffected by this</span></span><br><span class="line"><span class="comment"># setting. In communication with external systems, they are always applied only</span></span><br><span class="line"><span class="comment"># when a time series does not have a given label yet and are ignored otherwise.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">honor_labels:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="literal">false</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># honor_timestamps controls whether Prometheus respects the timestamps present</span></span><br><span class="line"><span class="comment"># in scraped data.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If honor_timestamps is set to "true", the timestamps of the metrics exposed</span></span><br><span class="line"><span class="comment"># by the target will be used.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If honor_timestamps is set to "false", the timestamps of the metrics exposed</span></span><br><span class="line"><span class="comment"># by the target will be ignored.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">honor_timestamps:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="literal">true</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configures the protocol scheme used for requests.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">scheme:</span> <span class="string">&lt;scheme&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="string">http</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional HTTP URL parameters.</span></span><br><span class="line"><span class="attr">params:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;string&gt;:</span> <span class="string">[&lt;string&gt;,</span> <span class="string">...]</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets the `Authorization` header on every scrape request with the</span></span><br><span class="line"><span class="comment"># configured username and password.</span></span><br><span class="line"><span class="comment"># password and password_file are mutually exclusive.</span></span><br><span class="line"><span class="attr">basic_auth:</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">username:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password:</span> <span class="string">&lt;secret&gt;</span> <span class="string">]</span></span><br><span class="line">  <span class="string">[</span> <span class="attr">password_file:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets the `Authorization` header on every scrape request with</span></span><br><span class="line"><span class="comment"># the configured bearer token. It is mutually exclusive with `bearer_token_file`.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token:</span> <span class="string">&lt;secret&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets the `Authorization` header on every scrape request with the bearer token</span></span><br><span class="line"><span class="comment"># read from the configured file. It is mutually exclusive with `bearer_token`.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">bearer_token_file:</span> <span class="string">/path/to/bearer/token/file</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configures the scrape request's TLS settings.</span></span><br><span class="line"><span class="attr">tls_config:</span></span><br><span class="line">  <span class="string">[</span> <span class="string">&lt;tls_config&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional proxy URL.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">proxy_url:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of Azure service discovery configurations.</span></span><br><span class="line"><span class="attr">azure_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;azure_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of Consul service discovery configurations.</span></span><br><span class="line"><span class="attr">consul_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;consul_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of DNS service discovery configurations.</span></span><br><span class="line"><span class="attr">dns_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;dns_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of EC2 service discovery configurations.</span></span><br><span class="line"><span class="attr">ec2_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;ec2_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of OpenStack service discovery configurations.</span></span><br><span class="line"><span class="attr">openstack_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;openstack_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of file service discovery configurations.</span></span><br><span class="line"><span class="attr">file_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;file_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of GCE service discovery configurations.</span></span><br><span class="line"><span class="attr">gce_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;gce_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of Kubernetes service discovery configurations.</span></span><br><span class="line"><span class="attr">kubernetes_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;kubernetes_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of Marathon service discovery configurations.</span></span><br><span class="line"><span class="attr">marathon_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;marathon_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of AirBnB's Nerve service discovery configurations.</span></span><br><span class="line"><span class="attr">nerve_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;nerve_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of Zookeeper Serverset service discovery configurations.</span></span><br><span class="line"><span class="attr">serverset_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;serverset_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of Triton service discovery configurations.</span></span><br><span class="line"><span class="attr">triton_sd_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;triton_sd_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of labeled statically configured targets for this job.</span></span><br><span class="line"><span class="attr">static_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;static_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of target relabel configurations.</span></span><br><span class="line"><span class="attr">relabel_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of metric relabel configurations.</span></span><br><span class="line"><span class="attr">metric_relabel_configs:</span></span><br><span class="line">  <span class="string">[</span> <span class="bullet">-</span> <span class="string">&lt;relabel_config&gt;</span> <span class="string">...</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Per-scrape limit on number of scraped samples that will be accepted.</span></span><br><span class="line"><span class="comment"># If more than this number of samples are present after metric relabelling</span></span><br><span class="line"><span class="comment"># the entire scrape will be treated as failed. 0 means no limit.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">sample_limit:</span> <span class="string">&lt;int&gt;</span> <span class="string">|</span> <span class="string">default</span> <span class="string">=</span> <span class="number">0</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><h4 id="tls"><a href="#tls" class="headerlink" title="tls"></a>tls</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CA certificate to validate API server certificate with.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">ca_file:</span> <span class="string">&lt;filename&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Certificate and key files for client cert authentication to the server.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">cert_file:</span> <span class="string">&lt;filename&gt;</span> <span class="string">]</span></span><br><span class="line"><span class="string">[</span> <span class="attr">key_file:</span> <span class="string">&lt;filename&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ServerName extension to indicate the name of the server.</span></span><br><span class="line"><span class="comment"># https://tools.ietf.org/html/rfc4366#section-3.1</span></span><br><span class="line"><span class="string">[</span> <span class="attr">server_name:</span> <span class="string">&lt;string&gt;</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable validation of the server certificate.</span></span><br><span class="line"><span class="string">[</span> <span class="attr">insecure_skip_verify:</span> <span class="string">&lt;boolean&gt;</span> <span class="string">]</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>启动Prometheus服务之后,可以通过浏览器访问地址,例如<code>http://128.1.10.22:9090</code>访问</p><h4 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h4><p>图形界面中,在Console中输入表达式,例如<code>prometheus_target_interval_length_seconds</code>,即可在页面上查询对应的指标数据,并且展示在图形上绘制出相关曲线</p><blockquote><p>prometheus_target_interval_length_seconds{quantile=”0.99”} 99%延迟<br>count(prometheus_target_interval_length_seconds) 返回实现序列的数量<br>rate(prometheus_tsdb_head_chunks_created_total[1m]) 一分钟内的tsdb块创建数量</p></blockquote><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><h3 id="Prometheus-VS-Graphite"><a href="#Prometheus-VS-Graphite" class="headerlink" title="Prometheus VS. Graphite"></a>Prometheus VS. Graphite</h3><h4 id="总体"><a href="#总体" class="headerlink" title="总体"></a>总体</h4><p>Graphite专注于成为<code>具有查询语言和图形的时序数据库</code>,其他问题由外部组件解决.</p><p>Prometheus是一个<code>全面的监控系统</code>,包括<code>基于时间序列</code>的数据库的<code>数据获取/存储/查询/可视化/报警</code>.具有<code>判断异常的知识</code>.</p><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>两者都能够存储时序数据,区别在于<br>Prometheus的原数据更加丰富,<br>Graphite的指标名称由<code>.</code>进行分割,通过这种方式隐含代表数据的维度,<br>Prometheus通过<code>键值对</code>的label代表数据的维度,作为指标名称的附加信息,通过这种方式实现查询语言更好的数据聚合操作,例如<code>filter/group/mach</code></p><p>此外,尤其是当Graphite和StatsD结合使用时,通常只在受监视的实力上存储聚合数据,而不是将实例保留为一个能够下钻分析问题的维度.</p><h4 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h4><p>Graphite的数据在本地以<code>Whisper</code>的格式存储,这是一种RRD风格的数据库,将数据以常规的间隔存储.每一个时间序列单独存放在一个文件,新的样本将在一定时间之后覆盖原有的样本(待明确含义).</p><p>Prometheus采用类似的方法,为每一个时间序列创造一个新的本地文件,但是允许数据以任意的间隔收集,可以和数据收集或者规则的执行保持一致.由于新的样本只是简单的通过append的方式添加,旧数据可以存储任意时间.Prometheus同样适用于许多短期的,或者是经常变化的时间序列集合.</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Prometheus提供了更丰富的数据模型和查询语言,可以更容易的启动并且集成至你的环境.如果你想要一个集群方案来保存长时间的历史数据,Graphite可能是更好的选择.</p><h3 id="Prometheus-VS-InfluxDB"><a href="#Prometheus-VS-InfluxDB" class="headerlink" title="Prometheus VS. InfluxDB"></a>Prometheus VS. InfluxDB</h3><p>InfluxDB是一个开源的时间序列数据库,可以选择商业版本的可伸缩/集群配置.InfluxDB的提出比Prometheus的开发时间要晚一年,所以我们没有办法将它作为一个替代方案.两个软件之间存在着一些显著的差异,并且针对不同场景进行应用.</p><h4 id="总体情况"><a href="#总体情况" class="headerlink" title="总体情况"></a>总体情况</h4><p>为了公平的比较,我们必须考虑将InfluxDB和<code>Kapacitor</code>一起使用,实现和Prometheus一样的功能场景.</p><p>InfluxDB的差异和Graphite类似,区别在于InfuxDB提供了可持续的查询,和Prometheus的记录规则相同.</p><p>Kapacitor的范围是Prometheus记录规则/警报规则/Alertmanager的通知功能的组合.Prometheus提供了更强大的查询语言来进行图形显示和警报,并且Prometheus Alertmanager还提供了分组/重复数据删除/静音的功能.</p><h4 id="数据模型-存储"><a href="#数据模型-存储" class="headerlink" title="数据模型/存储"></a>数据模型/存储</h4><p>与Prometheus一样,InfluxDB数据模型也将键值对作为标签,称为<code>tag</code>.此外,InfluxDB还有第二级标签,称为<code>field</code>,使用范围受到更多限制. InfluxDB支持最高达十亿分之一秒分辨率的时间戳,以及<code>float64,int64,bool和字符串数据类型</code>.相比之下,Prometheus支持<code>float64</code>数据类型,对字符串和毫秒分辨率时间戳的支持有限.</p><p>InfluxDB使用<a href="https://blog.raintank.io/logs-and-metrics-and-graphs-oh-my/" title="log-structured merge tree for storage with a write ahead log" target="_blank" rel="noopener"><code>log-structured merge tree for storage with a write ahead log</code></a>来存储带有按时间分片的预写日志的存储.与Prometheus每个时间序列的仅附加文件相比,此方法更适合事件记录.</p><p><a href="https://docs.influxdata.com/influxdb/v1.7/concepts/storage_engine/" title="Logs and Metrics and Graphs, Oh My!" target="_blank" rel="noopener">Logs and Metrics and Graphs, Oh My!</a> 这篇文章描述了事件日志和指标记录的区别.</p><h4 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h4><p>Prometheus服务独立运行,仅仅依赖于各自的本地存储和核心功能:scraping,规则处理和报警.开源版本的InfluxDB的功能也类似.</p><p>商业版的InfuxDB是一个分布式存储集群,存储和查询由多个节点一次处理.</p><p>这意味着商业版的InfluxDB更易于水平扩展,但是同样意味着你不得不从一开始就管理复杂的分布式存储系统.Prometheus更易于使用,但是经常需要根据产品/服务/数据中心或者类似方面的原因对服务进行碎片化,以实现伸缩性.各自独立的服务器(可以并行冗余运行)可以提供更好的可靠性和故障隔离.</p><p>Kapacitor的开源发布没有为规则/报警/通知功能内置分布式/冗余选项,可以通过用户手动分片实现伸缩扩展,和Prometheus类似.Infux提供了企业级的Kapacitor,支持分布式高可用的报警系统.</p><p>相比之下,Prometheus和Alertmanager通过开源的冗余选项,可以启动Prometheus的冗余副本并启用Alertmanager的高可用模式.</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>这两个系统具有很多相似之处.例如:同样具有标签(labels/tags)为多维指标提供便捷的支持.同样使用基础的数据压缩算法.同样具有广泛的扩展性,包括互相之间的集成.两者都具有<code>hooks</code>,可以让进一步对它们进行扩展,例如使用统计工具分析数据或者执行自动操作.</p><p>InfluxDB在以下方面表现的更好:</p><ol><li>处理时间日志,</li><li>商业版提供了集群功能,在长期的数据存储中表现更好</li><li>数据视图使得不同副本之间的数据保持一致</li></ol><p>Prometheus在以下方面表现的更好:</p><ol><li>指标数据的应用(对应时间日志),</li><li>更强大的查询语言,报警和通知功能,</li><li>高可用和正常使用(uptime)的图形/报警功能.</li></ol><p>InfluxDB主要由一个独立的商业公司维护核心代码,并提供高级特性,例如闭源的的集群/托管/支持.Prometheus是一个完全开源的独立项目,由许多公司和个人维护,其中一些还提供商业服务和支持(例如阿里云).</p><h3 id="Prometheus-VS-OpenTSDB"><a href="#Prometheus-VS-OpenTSDB" class="headerlink" title="Prometheus VS. OpenTSDB"></a>Prometheus VS. OpenTSDB</h3><p>OpenTSDB是一个基于Hadoop和HBase的分布式时间序列数据库.</p><h4 id="总体-1"><a href="#总体-1" class="headerlink" title="总体"></a>总体</h4><p>和Graphite类似</p><h4 id="数据模型-1"><a href="#数据模型-1" class="headerlink" title="数据模型"></a>数据模型</h4><p>OpenTSDB的数据模型几乎和Prometheus一致:时间序列由一系列的键值对定义(OpenTSDB的tags对应Prometheus的labels).所有的指标数据存在一起,限制指标的基数.有一些细微的差别:Premetheus允许标签值中包含任意字符,而OpenTSDB的限制更严格.OpenTSDB缺少查询语言,只能通过API进行简单的查询,聚合和数学运算.</p><h4 id="存储-1"><a href="#存储-1" class="headerlink" title="存储"></a>存储</h4><p>OpenTSDB的存储实现基于Hadoop和HBase,意味着OpenTSDB可以很轻易的实现水平扩展,但是你不得不从一开始就接受运行Hadoop/HBase集群的复杂性.</p><p>Prometheus的初始使用更加简单,但是一单超出了单个节点的容量,就需要显式的进行分片.</p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>Prometheus提供了更丰富的查询语言,可以处理更大基数的指标,并且构成了完整的监视系统的一部分.如果你已经在运行Hadoop,并且重视长期存储的优势,OpenTSDB将是更好的选择.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React学习</title>
      <link href="/2019/06/29/React%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/06/29/React%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="习惯性叨逼叨"><a href="#习惯性叨逼叨" class="headerlink" title="习惯性叨逼叨"></a>习惯性叨逼叨</h2><p>今年工作有点不上心,上班吃饭上班下班吃饭看视频睡觉-&gt;上班吃饭上班下班吃饭睡觉-&gt;上班…<br>工作的事情也不怎么用心,下班也不用心,浑浑噩噩半年又过去了.<br>然后前一段工作安排了个写前端的活,之前看过的 vue.js 又捡起来看了看,顺便就又膨胀了觉得自己可以顺手把 ES5/TS/Angular/React/ReactNative/Weex/Flutter/Dart 什么的一起看了.<br>又觉得 Webpack/Babel/ESLint/TSLint/CSS/Less/Sass 什么的也没什么难的,然后就吭哧吭哧的看了几天文档,然后发现,其实需要沉下心来学一下的东西还挺多的…<br>虽然主要也不是做这个,不过了解一下也没什么坏处,整理一下自己学习 React 的东西吧,光看不学还是弟弟.<br>我要涨工资…</p><a id="more"></a><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><p>介绍就不多说了,无非就是起源 Facebook 用于 instgram 的项目开发,血统高贵,应用广泛,各种优点,直接开始正题</p><h3 id="React-是什么"><a href="#React-是什么" class="headerlink" title="React 是什么"></a>React 是什么</h3><blockquote><p>React-用于构建用户界面的 JavaScript 库</p></blockquote><p>实质上,React 是一个前端库/框架,用户通过编写 JavaScript+HTML+CSS 代码实现网页的布局,展示,交互等功能.<br>传统逻辑下,我们编写一个网页首先要新建一个 html 页面,然后在页面上设计好我们的页面样式和布局,通过 JavaScript 代码响应页面的交互事件,请求数据,并且通过直接操作页面元素的方式实现功能,这个时候最常用的库是 <code>JQuery</code>.<br>但是后来,可能是人们发现这种操作页面元素的方式代码有很多冗余,用户在关注实际业务逻辑的同时也会过度的关注与页面元素的操作逻辑,于是开始尝试着将逻辑编写和页面元素的操作渐渐隔离开,<code>JQuery</code>其实能够实现一部分目标,但是还不够,用户只是在选择和操作页面元素时更加的方便,但是并没有抛开这一部分工作.<br>再后来,人们尝试着将页面元素的操作封装的更深,尽可能的屏蔽用户对于页面元素的操作,使得用户更专注于业务逻辑本身,这时候就出现了<code>MVC</code>/<code>MVVM</code>等设计思想,也出现了各种各样的框架.<br>目前说起来最流行的框架,无非是<code>React</code>,<code>Angular</code>,<code>Vue.js</code>,各自有自己的设计理念,我现在的学习除了初步掌握这些技术本身之外,更重要的在于学习其设计思想,拓展视野.</p><p>本来想翻墙白嫖<a href="https://www.reactjs.org/" title="React 官网" target="_blank" rel="noopener">官网</a>的信息,无奈断了代理…暂且结合之前看的视频和中文网站的信息开始吧 ┑(￣ Д ￣)┍</p><blockquote><p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“组件”。</p></blockquote><h3 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h3><p>随着前端技术的发展,从 html+js+css+assets 的构建方式变化到了现在通过各种工具,专门的 cli 工具,npx,脚手架.<br>优点:简单易用,新手可以快速开始代码的编写<br>缺点:就是如果是新手,开始开发之后遇到一些需求的时候手足无措,一脸蒙蔽<br>因此,脚手架/cli 可以用,但是自己动手也要会,知己知彼</p><p>例如官方提供的最简单的方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br></pre></td></tr></table></figure><p>这句命令会在当前路径创建一个 my-app 的文件夹,并且初始化一个 react 项目,包含了打包环境,基础库(React/ReactDom 等),npm 脚本命令等,在命令执行完成之后可以直接切换到目录下执行 npm start,就看到了一个 Hello World 程序<br><strong><em>But</em></strong>,这种方式好像不太符合目前的主流模式,webpack+babel+loader+plugin+webpack-dev-server….所以我也就跑一下,然后切换到 webpack</p><h4 id="安装-devDependencies"><a href="#安装-devDependencies" class="headerlink" title="安装 devDependencies"></a>安装 devDependencies</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mkdir my-app</span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line">npm init</span><br><span class="line"><span class="comment"># 接下来回车回车回车回车....</span></span><br><span class="line"><span class="comment"># 然后开始安装依赖包</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># webpack工具,提供了打包,运行,热加载等功能,集成babel,html-webpack-plugin,style-loader等插件</span></span><br><span class="line">npm install webpack webpack-cli webpack-dev-server webpack-merge html-webpack-plugin -D</span><br><span class="line"><span class="comment"># react基础环境,react+react-dom,scripts在这里应该没用到</span></span><br><span class="line">npm install react react-dom -D <span class="comment">#react-scripts</span></span><br><span class="line"><span class="comment"># babel组件,包括babel核心和jsx支持</span></span><br><span class="line">npm install babel-core jsx-loader -D</span><br><span class="line"><span class="comment"># 样式打包插件</span></span><br><span class="line">npm install style-loader css-loader sass-loader url-loader file-loader -D</span><br></pre></td></tr></table></figure><h4 id="配置基础环境"><a href="#配置基础环境" class="headerlink" title="配置基础环境"></a>配置基础环境</h4><h5 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h5><p><code>configs/webpack.common.js</code>通用配置,包含了:</p><ol><li>打包模式(development/production)的设置</li><li>项目入口(entry)</li><li>项目输出(output)设置</li><li>插件,包含 jsx 语法模块,sass/css 编译模块</li><li>优化配置 optimization</li><li>webpack-dev-server 配置</li><li>同义词(alias)配置</li><li>HtmlWebPackPlugin/HotModuleReplacementPlugin 配置</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebPackPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> APP_PATH = path.join(__dirname, <span class="string">"../src"</span>);</span><br><span class="line"><span class="keyword">const</span> DIST_PATH = path.join(__dirname, <span class="string">"../dist"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env, argv</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> PROD_MODE = argv.mode === <span class="string">"production"</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">      main: path.resolve(__dirname, APP_PATH, <span class="string">"app.jsx"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">      path: path.resolve(DIST_PATH),</span><br><span class="line">      filename: <span class="string">"[name].[hash].js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">        &#123; <span class="attr">test</span>: <span class="regexp">/\.jsx|js$/</span>, <span class="attr">use</span>: [<span class="string">"babel-loader"</span>] &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          test: <span class="regexp">/\.scss|css$/</span>,</span><br><span class="line">          use: [<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>, <span class="string">"sass-loader"</span>],</span><br><span class="line">          include: [APP_PATH, /bootstrap.min.css/]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">      splitChunks: &#123;</span><br><span class="line">        chunks: <span class="string">"async"</span>,</span><br><span class="line">        minSize: <span class="number">30000</span>,</span><br><span class="line">        maxSize: <span class="number">0</span>,</span><br><span class="line">        minChunks: <span class="number">1</span>,</span><br><span class="line">        maxAsyncRequests: <span class="number">5</span>,</span><br><span class="line">        maxInitialRequests: <span class="number">3</span>,</span><br><span class="line">        automaticNameDelimiter: <span class="string">"~"</span>,</span><br><span class="line">        name: <span class="literal">true</span>,</span><br><span class="line">        cacheGroups: &#123;</span><br><span class="line">          common: &#123;</span><br><span class="line">            name: <span class="string">"common"</span>,</span><br><span class="line">            chunks: <span class="string">"initial"</span>,</span><br><span class="line">            priority: <span class="number">2</span>,</span><br><span class="line">            minChunks: <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      runtimeChunk: &#123;</span><br><span class="line">        name: <span class="string">"runtime"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      hot: <span class="literal">true</span>,</span><br><span class="line">      inline: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">"@"</span>: APP_PATH</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> HtmlWebPackPlugin(&#123;</span><br><span class="line">        filename: <span class="string">"index.html"</span>,</span><br><span class="line">        template: <span class="string">"./src/index.html"</span>,</span><br><span class="line">        minify: &#123;</span><br><span class="line">          removeComments: PROD_MODE,</span><br><span class="line">          collapseWhitespace: PROD_MODE</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>configs/webpack.dev.js</code>包含了开发模式下,DevServer 的一些配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">env, argv</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> Merge(CommonConfig(env, argv), &#123;</span><br><span class="line">    mode: <span class="string">"development"</span>,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">      contentBase: path.join(__dirname, <span class="string">"./dist"</span>),</span><br><span class="line">      compress: <span class="literal">true</span>,</span><br><span class="line">      port: <span class="number">9000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h5><p>提供了 jsx 语法和 es6 语法特性的支持</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    <span class="string">"@babel/plugin-transform-react-jsx"</span>,</span><br><span class="line">    <span class="string">"@babel/plugin-proposal-class-properties"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置-npm-命令"><a href="#配置-npm-命令" class="headerlink" title="配置 npm 命令"></a>配置 npm 命令</h5><p>这里主要是添加<code>dev</code>和<code>build</code>运行命令</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"my-app"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --mode development --open --config configs/webpack.dev.js"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --mode production --config configs/webpack.prod.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.26.3"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"file-loader"</span>: <span class="string">"^4.0.0"</span>,</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="attr">"jsx-loader"</span>: <span class="string">"^0.13.2"</span>,</span><br><span class="line">    <span class="attr">"node-sass"</span>: <span class="string">"^4.12.0"</span>,</span><br><span class="line">    <span class="attr">"react"</span>: <span class="string">"^16.8.6"</span>,</span><br><span class="line">    <span class="attr">"react-dom"</span>: <span class="string">"^16.8.6"</span>,</span><br><span class="line">    <span class="attr">"react-scripts"</span>: <span class="string">"^3.0.1"</span>,</span><br><span class="line">    <span class="attr">"sass-loader"</span>: <span class="string">"^7.1.0"</span>,</span><br><span class="line">    <span class="attr">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">    <span class="attr">"url-loader"</span>: <span class="string">"^2.0.1"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.35.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.5"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.7.2"</span>,</span><br><span class="line">    <span class="attr">"webpack-merge"</span>: <span class="string">"^4.2.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h4><p><code>src/index.html</code>,挂载渲染的元素<code>id=&quot;app&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p><code>src/app.jsx</code>,包含了<code>APP组件</code>的定义,以及 React 的元素挂载</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDom.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>));</span><br></pre></td></tr></table></figure><p>至此,Hello World 项目创建成功,运行<code>npm run dev</code>,即可运行项目,看到 HelloWorld 效果</p><h2 id="TodoList-示例"><a href="#TodoList-示例" class="headerlink" title="TodoList 示例"></a>TodoList 示例</h2><p>这个要比 hello world 更完整一些</p><ol><li>包含了 props,并且可以包含 state 和 children,refs 等,能够区分 state 和 props 的不同应用场景</li><li>包含了 render 函数</li><li>可以包含生命周期函数</li></ol><p><code>src/components/TodoList.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> list = props.list.map(<span class="function"><span class="params">o</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;o.id&#125;</span>&gt;</span>&#123;o.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;list&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/app.jsx</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> TodoList <span class="keyword">from</span> <span class="string">"@/components/TodoList.jsx"</span>;</span><br><span class="line"><span class="comment">// 构建数据</span></span><br><span class="line"><span class="keyword">let</span> todo = &#123;</span><br><span class="line">  todo: [<span class="string">"买调料"</span>, <span class="string">"烧水"</span>, <span class="string">"磨刀"</span>, <span class="string">"杀牛"</span>, <span class="string">"喝牛奶"</span>, <span class="string">"吃牛肉"</span>].map(<span class="function">(<span class="params">k, v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">id</span>: v, <span class="attr">content</span>: k &#125;;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APP</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">  &#125;</span><br><span class="line">  render = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;TodoList list=&#123;todo&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDom.render(&lt;APP /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"app"</span>));</span><br></pre></td></tr></table></figure><h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2><p>其实这个东西一写起来就没完,熟练的完全不用看我这些罗里吧嗦的一堆有的没的,官方文档最好.不会的,就只能跟着复制粘贴敲命令,出了问题就懵逼…</p><ol><li style="list-style: none"><input type="checkbox"> webpack</li><li style="list-style: none"><input type="checkbox"> loader</li><li style="list-style: none"><input type="checkbox"> plugin</li><li style="list-style: none"><input type="checkbox"> dev-server</li><li style="list-style: none"><input type="checkbox"> npm</li><li style="list-style: none"><input type="checkbox"> babel</li><li style="list-style: none"><input type="checkbox"> es6 各种新特性</li><li style="list-style: none"><input type="checkbox"> jsx</li></ol><p>其实 webpack 这个东西我也用的不熟,毕竟用的不多,而且这个迭代的感觉是有点快…各种新特性,新插件,新配置,新写法 (╯﹏╰)<br>先写到这里吧,慢慢补…</p><ol><li>ReactDOM.render</li><li><code>React.Component</code>/<code>constructor</code>/<code>render</code></li><li>state/props/children</li><li>生命周期函数<code>componentDidMount</code>/<code>componentWillUnmount</code></li><li>设计思想</li><li>事件处理</li><li>Debugger with Visual Studio Code</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018-09-08</title>
      <link href="/2018/09/08/2018-09-08/"/>
      <url>/2018/09/08/2018-09-08/</url>
      
        <content type="html"><![CDATA[<h1 id="等外卖中-随便写点东西"><a href="#等外卖中-随便写点东西" class="headerlink" title="等外卖中,随便写点东西"></a>等外卖中,随便写点东西</h1><blockquote><p>最近一年真的是发生了太多的事情,适当的也要写一下<br><a id="more"></a><br>首先是去年四五六月份开始吧,具体我也不记得了(OSChina Git 仓库里面的代码还在,上传日期是6月12日,差不多也就是这几天吧),反正是做了一件特别傻逼的事情,持续了几个月,生活质量很差,睡不好,吃不够.</p></blockquote><p>P.S. 外卖员车子坏了,好像是过了很久才送达,不过无所谓咯,我这个人其实很讲道理的…</p><p>然后,刚才第一次提交,tmd竟然写的标题是9月4号…我这生活质量可见一斑啊!</p><blockquote><p>关于生活</p></blockquote><p>去年一月到2018-09-04,体重增加了有50斤,什么概念?</p><p>过了一年,上个月体检结果出来感觉特别不好,加上这一年的思考,工作的调整,还有一些其他的经历吧,tmd快三十了才想通一些事情,比起某些人真的差太远啊…</p><p>所以说埋头工作不是什么好事情,生活也很重要.but…说起我家里一堆糟心的事情,也是没办法,如果保留现在的记忆再来一次我肯定会有一个不一样的人生选择,不过当时的事情其实都是必然,现在也还好.</p><p>明天去跟另一个胖子吃顿饭,一个是搞点发票,再一个就是出去散散心,其实五角场有一家迪卡侬距离我算很近,不过平时懒得去.然后公司发的月饼反正是不受我待见,顺路送人,自己吃的自己买咯,公司我还是更看重金钱待遇,这点人文关怀么…可以缓一缓</p><blockquote><p>关于工作</p></blockquote><p>说良心话,我之前一直都对同事特别的不好,倒不是说对不起谁,但是确实不是正常的相处,也是和性格有关吧.</p><p>至今为止,我还没有想好要在工作中求稳定,我觉得自己还是有要特别的去努力争取的东西,所以工作中<code>摸鱼</code>我是做不来的,由于种种原因,不过马上搬家,可能会好一点.离家近一点,天气渐凉可以骑车去,健身房慢慢的也可以去,然后项目…</p><p>关于项目怎么说呢,我也可以理解前面工程人员的<code>急功近利</code>,但是还是说,需求提的要讲道理.</p><p>总结了一下,有一些需求是我不愿意做的</p><ul><li>需求模糊不清,不知道自己要什么,我这个人也是有选择障碍的,你说不清,我不理解需求做不出选择,咱就别做了吧…</li><li>需求不合理,虽然水务有自己的知识体系,但是有一些东西是相通的,有些东西针对个人是合理的,但是针对于<code>系统</code>,我觉得就机器不合理.</li><li>一昧迎合客户,我很讨厌对方以<code>产品延续性</code>作为需求的依据,好的东西是应该有延续性,可是不好的…说句实在话,客户的需求很多时候并不是以客观的好/不好评价的,而是自身的利益,比如佛山当时把很多之前做成严格统计的功能逻辑改掉,其实就是<code>避免考核自己</code></li><li><code>不解释,你照做就好</code>,当然我对于照做也没什么意见,可是现实情况是项目人员根本没时间考虑正确性合理性的问题,朝令夕改事后不认的事情比比皆是,讲道理以现有的收入水平,我是做不到唯命是从的程度…开发人员适当的理解业务,有助于功能设计的合理性以及后台设计的合理性,同时做的过程中也不用每事必问,减少大家的无畏沟通.当然项目是不可能放弃<code>最终解释权</code>的吧…向钱看,毕竟人家是直接创收的部门咯</li></ul><p>说起来有点装逼,但是我怎么感觉有的科班毕业的对业务的理解还没我合理…不过算了,软件开发有这些问题的也不是一家,通病,如何处理才重要,我也只是吐槽吐槽…今天发的文档看起来没我什么事,不是挺好么哈哈</p><blockquote><p>关于这个时代</p></blockquote><p>说是时代有点装逼,其实无非是活过来的这些年,我开始越来越讨厌一些东西了.举例:</p><ul><li>以BAT为首的互联网公司,搜集用户的各种数据,然后给你推送各种各样的东西,包括商品,咨询,知识…问题是,这些东西完全没有客观性,商品无非为了让客户掏钱,咨询也是引领舆论,创造各种有利自己,或是自己将要涉足领域的商业宣传内容,至于知识…有多少是真的?</li><li>最近渐渐的也参与面试了一些人,结合自己当初出来找工作时的状态,还是感慨自己太不成熟,为了钱,有什么是不能骗的?不过还是说,工作/找工作,在我看来还是要有一些担当和追求的,像有的同事,一句<code>好了就行了你管它为什么</code>我也是有点无可奈何…</li><li>类似<code>百度</code>,<code>抖音</code>,<code>新浪</code>,甚至<code>虎扑</code>,<code>斗鱼</code>等各类直播软件,以及<code>知乎</code>这种素来标榜自己精英社区的,有媒体属性的产品,利用人性,或者说动物的弱点,比如懒惰,软弱,自恋等属性,极尽手段以各种低劣的内容吸引用户的注意,我必须承认我也不是什么高等生物,可是这些东西真的是有害, 堪称精神鸦片,当然也涉及敏感的国情,无奈啊</li><li>民众的狂欢,还是说我不敢自认有什么高人一等的地方,可是看着各路<code>媒体</code>和<code>自媒体</code>引领的舆论狂潮,我还是觉得悲哀.同年龄的人也是奔三了,还被各种舆论牵着鼻子走,<code>河南高考掉包</code>,<code>假疫苗</code>,<code>飙车撞人</code>,各种值得舆论关注的事情没人关注,什么<code>刘强东强奸</code>,<code>区块链</code>,<code>马航在谷歌地图中柬埔寨密林在照片中被发现,14年早已在某位女士的微博中信誓旦旦的提供了线索缺无人关注,政府无能</code>,<code>马云爸爸拍功守道很努力</code>,<code>陪健林唱歌的女性是哪位明星?</code>,<code>王石女秘书</code>之类的话题,难受,发自内心的难受.</li></ul><p>我从来都是悲观主义者,从来也是希望以理智看待这个世界,眼界低总好过愚昧吧…我们和那些我们鄙视的大爷大妈,到底有什么区别呢?<br>这个社会,这个世界,到底又有多少东西是真的呢?所有的一切都可以用利益衡量,却又粉饰着各种<code>良药</code>的包装…操他妈的!</p><blockquote><p>关于今年剩这点时间</p></blockquote><p>吃吃喝喝学习健身,天气已经转凉,搬家完了找个地儿报个驾校去.其实愿望还是挺多的,列个单子看看</p><ul><li>等苹果发新品吧,看看有没有新的iWatch和AirPods,耳机有的话就入一个(吐槽一句,今年港币汇率有点崩塌,不然我还考虑换个新款MBP了….)</li><li>手机我觉得没必要换,换个电池就行了.</li><li>顺便想起来我的手机也是A1660,之前做地铁在有几站的时候出现过有网络信号但是不能上网的问题,算上今年摔的几次壳子上的划痕,几个问题一并处理,说不定,嘿嘿嘿…</li><li>报个驾校,腾点时间学学</li><li>数学,还是数学…年初开始看,现在还是年初的水平,也不抱太大希望…不过真的是有用,学了一点,谢博说话有时候就不完全是天书了😂</li><li>健身房,减肥要求不高, 先减起来吧,50斤太伤了…我说怨恨你 也合情合理吧?去年那几个月过的,也是往事不堪回首…</li><li>说起工作,不说效果好不好,今年还是要把读数这一块做做.不过感觉这个时代是不是太迷信ML了,这种感觉用传统的几何学应该也能做到不错的水平吧?but,公司也没相关人才是真的</li><li>游戏机借出去好几次了,突然又有点想玩<code>八方旅人</code>….不过没时间啊,我主要多线程不行,打游戏生活工作不能兼顾,先兼顾工作和生活再说吧</li></ul><p>先写这么多吧,告别了你,告别了颓废,却也告别了健康,也还没有找到该有的生活和节奏,<code>钱啊,钱啊!!!</code></p><p>总之,还是要努力啊,最近抓紧整理一下文档,争取十月份在公司做个分享</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Selenium</title>
      <link href="/2017/06/01/Selenium/"/>
      <url>/2017/06/01/Selenium/</url>
      
        <content type="html"><![CDATA[<p>写的最认真的东西,现在其实想删掉了呵呵<br><a id="more"></a></p><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><h4 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h4><ol><li>官网<a href="https://www.python.org/downloads/" title="Python" target="_blank" rel="noopener">下载</a>安装包,安装到目标位置</li><li>安装完成后右键点击<code>我的电脑</code>-&gt;<code>属性</code>-&gt;<code>高级系统设置</code>-&gt;<code>环境变量</code>,将python安装的路径添加到PATH里面,例如<code>;c:\python2.6</code>.这里注意如果是直接在文本后面追加的话记得前面要加分号<code>;</code>.添加完成之后再命令行中输入python能够进入python shell,说明安装成功</li></ol><h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><blockquote><p>pip is already installed if you’re using Python 2 &gt;=2.7.9 or Python 3 &gt;=3.4 binaries downloaded from python.org, but you’ll need to upgrade pip.</p></blockquote><p>官网的说法是2.7.9以及3.4版本以上的python安装后已经包含了pip,不需要另外安装,执行<code>pip install</code>命令安装最新版本即可(参数-U表示安装或更新至最新版)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U pip</span><br></pre></td></tr></table></figure><p>版本不满足时,首先下载<a href="https://bootstrap.pypa.io/get-pip.py" title="get-pip" target="_blank" rel="noopener">get-pip</a>文件,并在命令行中切换至文件所在的路径执行文件<br>这里吐槽一下windows的cmd实在不好用,powershell也一般,推荐一个暂时感觉还不错的命令行工具<a href="http://cmder.net/" title="cmder" target="_blank" rel="noopener">cmder</a><br><a href="https://github.com/cmderdev/cmder/releases/download/v1.3.2/cmder.zip" title="cmder-download" target="_blank" rel="noopener">下载地址</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换至指定路径</span></span><br><span class="line"><span class="built_in">cd</span> xxxx/xxxx</span><br><span class="line"><span class="comment"># 执行</span></span><br><span class="line">python ./get-pip.py</span><br></pre></td></tr></table></figure><h4 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h4><p><a href="https://pypi.python.org/pypi/selenium" title="selenium" target="_blank" rel="noopener">官网链接</a><br>安装完成<code>pip</code>之后,使用命令安装<code>selenium</code>包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -U selenium</span><br><span class="line">Collecting selenium</span><br><span class="line">  Downloading selenium-3.4.3-py2.py3-none-any.whl (931kB)</span><br><span class="line">    100% |████████████████████████████████| 942kB 191kB/s</span><br><span class="line">Installing collected packages: selenium</span><br><span class="line">Successfully installed selenium-3.4.3</span><br></pre></td></tr></table></figure><h4 id="下载WebDriver"><a href="#下载WebDriver" class="headerlink" title="下载WebDriver"></a>下载WebDriver</h4><h5 id="ChromeDriver"><a href="#ChromeDriver" class="headerlink" title="ChromeDriver"></a>ChromeDriver</h5><p><a href="https://sites.google.com/a/chromium.org/chromedriver/downloads" title="chrome-driver" target="_blank" rel="noopener">chrome-driver</a></p><ul><li><p>截止目前最新的windows版本的driver的<a href="https://chromedriver.storage.googleapis.com/2.29/chromedriver_win32.zip" title="chromedriver_win32.zip" target="_blank" rel="noopener">下载地址</a></p></li><li><p>将解压后的<code>chromedriver.exe</code>文件放在指定路径,例如<code>D:\Selenium\chromedriver.exe</code>路径下,将<code>D:\Selenium\</code>目录添加至环境变量<code>PATH</code>中</p></li></ul><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait <span class="comment"># available since 2.4.0</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC <span class="comment"># available since 2.26.0</span></span><br><span class="line"><span class="comment"># 新建一个chrome进程driver</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 打开指定页面</span></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">driver.</span><br><span class="line"><span class="comment"># 将浏览器当前的标题打印出来</span></span><br><span class="line"><span class="keyword">print</span> driver.title</span><br><span class="line"><span class="comment"># 定位到页面中的具体元素,这里需要一点html的知识,或者直接浏览器切换到开发者模式查看xpath&amp;cssselector</span></span><br><span class="line">inputElement = driver.find_element_by_name(<span class="string">"wd"</span>)</span><br><span class="line"><span class="comment"># 填写搜索内容</span></span><br><span class="line">inputElement.send_keys(<span class="string">"cheese!"</span>)</span><br><span class="line"><span class="comment"># 提交input控件中的内容</span></span><br><span class="line">inputElement.submit()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 这里是等待页面状态改变的方法,WebDriverWait(driver,10)代表定的进程等待10秒,直到符合until()中的参数符合或是超过了等待时间</span></span><br><span class="line">    WebDriverWait(driver, <span class="number">10</span>).until(EC.title_contains(<span class="string">"cheese!"</span>))</span><br><span class="line">    <span class="comment">#另一种写法</span></span><br><span class="line">    wait = WebDriverWait(driver,<span class="number">10</span>)</span><br><span class="line">    element = wait.until(EC.title_contains(<span class="string">"cheese!"</span>))</span><br><span class="line">    <span class="comment"># cheese!_百度搜索</span></span><br><span class="line">    <span class="keyword">print</span> driver.title</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br><span class="line">vi ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/Documents/workspace/Selenium:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>测试是否安装成功</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 测试完成后记得关闭进程</span></span><br><span class="line">dr.quit()</span><br></pre></td></tr></table></figure><p>安装成功的话这里应该显示一个空的浏览器<br><img src="chromedriver_empty.png" alt="chromedriver_empty"></p><h2 id="Introducing-the-Selenium-WebDriver-API-by-Example"><a href="#Introducing-the-Selenium-WebDriver-API-by-Example" class="headerlink" title="Introducing the Selenium-WebDriver API by Example"></a>Introducing the Selenium-WebDriver API by Example</h2><p>照搬官网的例子</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait <span class="comment"># available since 2.4.0</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC <span class="comment"># available since 2.26.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个chrome进程driver</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开指定页面</span></span><br><span class="line">driver.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将浏览器当前的标题打印出来</span></span><br><span class="line"><span class="keyword">print</span> driver.title</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到页面中的具体元素,这里需要一点html的知识,或者直接浏览器切换到开发者模式查看xpath&amp;cssselector</span></span><br><span class="line">inputElement = driver.find_element_by_name(<span class="string">"wd"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填写搜索内容</span></span><br><span class="line">inputElement.send_keys(<span class="string">"cheese!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交input控件中的内容</span></span><br><span class="line">inputElement.submit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 这里是等待页面状态改变的方法,WebDriverWait(driver,10)代表定的进程等待10秒,直到符合until()中的参数符合或是超过了等待时间</span></span><br><span class="line">    WebDriverWait(driver, <span class="number">10</span>).until(EC.title_contains(<span class="string">"cheese!"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#另一种写法</span></span><br><span class="line">    wait = WebDriverWait(driver,<span class="number">10</span>)</span><br><span class="line">    element = wait.until(EC.title_contains(<span class="string">"cheese!"</span>))</span><br><span class="line">    <span class="comment"># cheese!_百度搜索</span></span><br><span class="line">    <span class="keyword">print</span> driver.title</span><br><span class="line"></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p>上面差不多就是一个完整的例子了,实际操作过程中有一些地方灵活运用就好</p><h3 id="打开浏览器"><a href="#打开浏览器" class="headerlink" title="打开浏览器"></a>打开浏览器</h3><p>这里不同浏览器的话需要<a href="http://www.seleniumhq.org/download/" title="webdriver-download" target="_blank" rel="noopener">下载</a>对应的webdriver,并且将文件所在的路径添加到系统的环境变量</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 新建实例</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 设置大小</span></span><br><span class="line">driver.set_window_size(<span class="number">240</span>, <span class="number">320</span>)</span><br><span class="line"><span class="comment"># 最大化</span></span><br><span class="line">driver.maximize_window()</span><br><span class="line"><span class="comment"># 获取页面title</span></span><br><span class="line">driver.title</span><br><span class="line"><span class="comment"># 获取页面当前url</span></span><br><span class="line">driver.current_url</span><br></pre></td></tr></table></figure><h3 id="关闭浏览器"><a href="#关闭浏览器" class="headerlink" title="关闭浏览器"></a>关闭浏览器</h3><p>测试的话一般在主程序的finally里面调用<code>driver.quit()</code>,不然有时候会因为异常导致没有退出进程,然后测试的机子会开很多个进程然后卡的不行…</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="打开页面"><a href="#打开页面" class="headerlink" title="打开页面"></a>打开页面</h3><p>以百度为例</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">'http://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure><h3 id="定位UI元素"><a href="#定位UI元素" class="headerlink" title="定位UI元素"></a>定位UI元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Form<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">async</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>simple login form<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"inputEmail"</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inputEmail"</span> <span class="attr">placeholder</span>=<span class="string">"Email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"control-label"</span> <span class="attr">for</span>=<span class="string">"inputPassword"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"inputPassword"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control-group"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span> Remember me</span><br><span class="line">          <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>Sign in<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>register<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> <span class="string">'HTTP_PROXY'</span><span class="keyword">in</span> os.environ: <span class="keyword">del</span> os.environ[<span class="string">'HTTP_PROXY'</span>]</span><br><span class="line"></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line">file_path = <span class="string">'file:///'</span> + os.path.abspath(<span class="string">'form.html'</span>)</span><br><span class="line"><span class="keyword">print</span> file_path</span><br><span class="line"></span><br><span class="line">dr.get(file_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># by id</span></span><br><span class="line">dr.find_element_by_id(<span class="string">'inputEmail'</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># by name</span></span><br><span class="line">dr.find_element_by_name(<span class="string">'password'</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># by tagname</span></span><br><span class="line"><span class="keyword">print</span> dr.find_element_by_tag_name(<span class="string">'form'</span>).get_attribute(<span class="string">'class'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># by class_name</span></span><br><span class="line">e = dr.find_element_by_class_name(<span class="string">'controls'</span>)</span><br><span class="line">dr.execute_script(<span class="string">'$(arguments[0]).fadeOut().fadeIn()'</span>, e)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># by link text</span></span><br><span class="line">link = dr.find_element_by_link_text(<span class="string">'register'</span>)</span><br><span class="line">dr.execute_script(<span class="string">'$(arguments[0]).fadeOut().fadeIn()'</span>, link)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># by partial link text</span></span><br><span class="line">link = dr.find_element_by_partial_link_text(<span class="string">'reg'</span>)</span><br><span class="line">dr.execute_script(<span class="string">'$(arguments[0]).fadeOut().fadeIn()'</span>, link)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># by css selector</span></span><br><span class="line">div = dr.find_element_by_css_selector(<span class="string">'.controls'</span>)</span><br><span class="line">dr.execute_script(<span class="string">'$(arguments[0]).fadeOut().fadeIn()'</span>, div)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># by xpath</span></span><br><span class="line">dr.find_element_by_xpath(<span class="string">'/html/body/form/div[3]/div/label/input'</span>).click()</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">2</span>)</span><br><span class="line">dr.quit()</span><br></pre></td></tr></table></figure><h4 id="by-id"><a href="#by-id" class="headerlink" title="by id"></a>by id</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"coolestWidgetEvah"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">"coolestWidgetEvah"</span>)</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">element = driver.find_element(by=By.ID, value=<span class="string">"coolestWidgetEvah"</span>)</span><br></pre></td></tr></table></figure><h4 id="by-class"><a href="#by-class" class="headerlink" title="by class"></a>by class</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cheese"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Cheddar<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cheese"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Gouda<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line">cheeses = driver.find_elements_by_class_name(<span class="string">"cheese"</span>)</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheeses = driver.find_elements(By.CLASS_NAME, <span class="string">"cheese"</span>)</span><br></pre></td></tr></table></figure><h4 id="by-tag"><a href="#by-tag" class="headerlink" title="by tag"></a>by tag</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"..."</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法二</span></span><br><span class="line">frame = driver.find_element_by_tag_name(<span class="string">"iframe"</span>)</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">frame = driver.find_element(By.TAG_NAME, <span class="string">"iframe"</span>)</span><br></pre></td></tr></table></figure><h4 id="by-name"><a href="#by-name" class="headerlink" title="by name"></a>by name</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"cheese"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line">cheese = driver.find_element_by_name(<span class="string">"cheese"</span>)</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheese = driver.find_element(By.NAME, <span class="string">"cheese"</span>)</span><br></pre></td></tr></table></figure><h4 id="by-link-text"><a href="#by-link-text" class="headerlink" title="by link text"></a>by link text</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.google.com/search?q=cheese"</span>&gt;</span>cheese<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line">cheese = driver.find_element_by_link_text(<span class="string">"cheese"</span>)</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheese = driver.find_element(By.LINK_TEXT, <span class="string">"cheese"</span>)</span><br></pre></td></tr></table></figure><h4 id="by-partial-link-text"><a href="#by-partial-link-text" class="headerlink" title="by partial link text"></a>by partial link text</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.google.com/search?q=cheese"</span>&gt;</span>search for cheese<span class="tag">&lt;/<span class="name">a</span>&gt;</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line">cheese = driver.find_element_by_partial_link_text(<span class="string">"cheese"</span>)</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheese = driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">"cheese"</span>)</span><br></pre></td></tr></table></figure><h4 id="by-css"><a href="#by-css" class="headerlink" title="by css"></a>by css</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"food"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dairy"</span>&gt;</span>milk<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dairy aged"</span>&gt;</span>cheese<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line">cheese = driver.find_element_by_css_selector(<span class="string">"#food span.dairy.aged"</span>)</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheese = driver.find_element(By.CSS_SELECTOR, <span class="string">"#food span.dairy.aged"</span>)</span><br></pre></td></tr></table></figure><h4 id="by-xpath"><a href="#by-xpath" class="headerlink" title="by xpath"></a>by xpath</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"example"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">INPUT</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"other"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法一</span></span><br><span class="line">inputs = driver.find_elements_by_xpath(<span class="string">"//input"</span>)</span><br><span class="line"><span class="comment"># 写法二</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">inputs = driver.find_elements(By.XPATH, <span class="string">"//input"</span>)</span><br></pre></td></tr></table></figure><h3 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># execute_script的参数就是要执行的JavaScript代码</span></span><br><span class="line">element = driver.execute_script(<span class="string">"return $('.cheese')[0]"</span>)</span><br><span class="line"><span class="comment"># 获取label元素</span></span><br><span class="line">labels = driver.find_elements_by_tag_name(<span class="string">"label"</span>)</span><br><span class="line">inputs = driver.execute_script(</span><br><span class="line">    <span class="string">"var labels = arguments[0], inputs = []; for (var i=0; i &lt; labels.length; i++)&#123;"</span> +</span><br><span class="line">    <span class="string">"inputs.push(document.getElementById(labels[i].getAttribute('for'))); &#125; return inputs;"</span>, labels)</span><br></pre></td></tr></table></figure><h3 id="获取文本内容"><a href="#获取文本内容" class="headerlink" title="获取文本内容"></a>获取文本内容</h3><p>首先定位到目标元素,然后取<code>text</code>属性</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定位元素</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">"element_id"</span>)</span><br><span class="line"><span class="comment"># 取text</span></span><br><span class="line">element.text</span><br></pre></td></tr></table></figure><h3 id="输入内容"><a href="#输入内容" class="headerlink" title="输入内容"></a>输入内容</h3><p>选择下拉框</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定位到页面元素</span></span><br><span class="line">select = driver.find_element_by_tag_name(<span class="string">"select"</span>)</span><br><span class="line"><span class="comment"># 获取页面元素的相关属性</span></span><br><span class="line">allOptions = select.find_elements_by_tag_name(<span class="string">"option"</span>)</span><br><span class="line"><span class="comment"># 遍历操作</span></span><br><span class="line"><span class="keyword">for</span> option <span class="keyword">in</span> allOptions:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Value is: "</span> + option.get_attribute(<span class="string">"value"</span>)</span><br><span class="line">    option.click()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># available since 2.12</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="comment"># 直接定位到一个select对象</span></span><br><span class="line">select = Select(driver.find_element_by_tag_name(<span class="string">"select"</span>))</span><br><span class="line"><span class="comment"># 封装好的方法,不需要通过复杂的元素属性获取就可以操作对象</span></span><br><span class="line"><span class="comment"># 取消选择</span></span><br><span class="line">select.deselect_all()</span><br><span class="line"><span class="comment"># 通过可见的文本内容选择显示为"Edam"的元素</span></span><br><span class="line">select.select_by_visible_text(<span class="string">"Edam"</span>)</span><br></pre></td></tr></table></figure><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定位到submit控件</span></span><br><span class="line">submit = driver.find_element_by_id(<span class="string">"submit"</span>)</span><br><span class="line"><span class="comment"># 模拟点击操作</span></span><br><span class="line">submit.click()</span><br><span class="line"><span class="comment"># 可以简单写为</span></span><br><span class="line">driver.find_element_by_id(<span class="string">"submit"</span>).click()</span><br><span class="line"><span class="comment"># webdriver会遍历整个DOM,查找可以submit的元素,如果没有找到会抛异常,不推荐使用</span></span><br><span class="line">element.submit()</span><br></pre></td></tr></table></figure><h3 id="切换页面"><a href="#切换页面" class="headerlink" title="切换页面"></a>切换页面</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"somewhere.html"</span> <span class="attr">target</span>=<span class="string">"windowName"</span>&gt;</span>Click here to open a new window<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换至名为windowName的窗口</span></span><br><span class="line">driver.switch_to.window(<span class="string">"windowName"</span>)</span><br><span class="line"><span class="comment"># 通过handle遍历的方式切换窗口</span></span><br><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> driver.window_handles:</span><br><span class="line">    driver.switch_to.window(handle)</span><br><span class="line"><span class="comment"># 切换至frame</span></span><br><span class="line">driver.switch_to.frame(<span class="string">"frameName"</span>)</span><br><span class="line"><span class="comment"># 切换至alert</span></span><br><span class="line">alert = driver.switch_to.alert</span><br></pre></td></tr></table></figure><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p>简单的模拟浏览器的历史导航功能,感觉用的不多</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 浏览器前进</span></span><br><span class="line">driver.forward()</span><br><span class="line"><span class="comment"># 浏览器后退</span></span><br><span class="line">driver.back()</span><br></pre></td></tr></table></figure><p>sample</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">if</span> <span class="string">'HTTP_PROXY'</span><span class="keyword">in</span> os.environ: <span class="keyword">del</span> os.environ[<span class="string">'HTTP_PROXY'</span>]</span><br><span class="line"></span><br><span class="line">dr = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line">first_url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"now access %s"</span> %(first_url)</span><br><span class="line"></span><br><span class="line">dr.get(first_url)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">second_url = <span class="string">'http://www.news.baidu.com'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"now access %s"</span> %(second_url)</span><br><span class="line">dr.get(second_url)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"back to %s"</span> %(first_url)</span><br><span class="line">dr.back()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"forward to %s"</span> %(second_url)</span><br><span class="line">dr.forward()</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">dr.quit()</span><br></pre></td></tr></table></figure><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Go to the correct domain</span></span><br><span class="line">driver.get(<span class="string">"http://www.example.com"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now set the cookie. Here's one for the entire domain</span></span><br><span class="line"><span class="comment"># the cookie name here is 'key' and its value is 'value'</span></span><br><span class="line">driver.add_cookie(&#123;<span class="string">'name'</span>:<span class="string">'key'</span>, <span class="string">'value'</span>:<span class="string">'value'</span>, <span class="string">'path'</span>:<span class="string">'/'</span>&#125;)</span><br><span class="line"><span class="comment"># additional keys that can be passed in are:</span></span><br><span class="line"><span class="comment"># 'domain' -&gt; String,</span></span><br><span class="line"><span class="comment"># 'secure' -&gt; Boolean,</span></span><br><span class="line"><span class="comment"># 'expiry' -&gt; Milliseconds since the Epoch it should expire.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># And now output all the available cookies for the current URL</span></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> driver.get_cookies():</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"%s -&gt; %s"</span> % (cookie[<span class="string">'name'</span>], cookie[<span class="string">'value'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can delete cookies in 2 ways</span></span><br><span class="line"><span class="comment"># By name</span></span><br><span class="line">driver.delete_cookie(<span class="string">"CookieName"</span>)</span><br><span class="line"><span class="comment"># Or all of them</span></span><br><span class="line">driver.delete_all_cookies()</span><br></pre></td></tr></table></figure><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">profile = webdriver.FirefoxProfile()</span><br><span class="line">profile.set_preference(<span class="string">"general.useragent.override"</span>, <span class="string">"some UA string"</span>)</span><br><span class="line">driver = webdriver.Firefox(profile)</span><br></pre></td></tr></table></figure><h1 id="拖放"><a href="#拖放" class="headerlink" title="拖放"></a>拖放</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br><span class="line"><span class="comment"># 要拖拽(drag)的元素</span></span><br><span class="line">element = driver.find_element_by_name(<span class="string">"source"</span>)</span><br><span class="line"><span class="comment"># 要释放位置的目标元素</span></span><br><span class="line">target =  driver.find_element_by_name(<span class="string">"target"</span>)</span><br><span class="line"><span class="comment"># 拖拽element元素至target元素所在的位置</span></span><br><span class="line">ActionChains(driver).drag_and_drop(element, target).perform()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> selenium </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Yield</title>
      <link href="/2017/06/01/yield/"/>
      <url>/2017/06/01/yield/</url>
      
        <content type="html"><![CDATA[<p>yield这个关键字是之前看爬虫框架的时候demo里面用到过的,当时心情也不好,没心思琢磨,今天突然看到一篇还不错的文章,感觉讲的够清楚,做个笔记<br><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" title="Python yield 使用浅析" target="_blank" rel="noopener">参考链接</a><br><a id="more"></a><br>按照我现在的理解,yield的作用就是返回一个可迭代的对象,用例子看一下吧</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feb</span><span class="params">(max)</span>:</span></span><br><span class="line">    n,a,b=<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;max:</span><br><span class="line">        <span class="keyword">yield</span> b</span><br><span class="line">        a,b=b,a+b</span><br><span class="line">        n+=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>以上就是一个生成斐波那契数列的方法了,调用方法就跟range一样</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = feb(<span class="number">20</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">55</span></span><br><span class="line"><span class="number">89</span></span><br><span class="line"><span class="number">144</span></span><br><span class="line"><span class="number">233</span></span><br><span class="line"><span class="number">377</span></span><br><span class="line"><span class="number">610</span></span><br><span class="line"><span class="number">987</span></span><br><span class="line"><span class="number">1597</span></span><br><span class="line"><span class="number">2584</span></span><br><span class="line"><span class="number">4181</span></span><br><span class="line"><span class="number">6765</span></span><br></pre></td></tr></table></figure><p>简单地讲，yield 的作用就是把一个函数变成一个 generator，带有 yield 的函数不再是一个普通函数，Python 解释器会将其视为一个 generator，调用 fab(5) 不会执行 fab 函数，而是返回一个 iterable 对象！在 for 循环执行时，每次循环都会执行 fab 函数内部的代码，执行到 yield b 时，fab 函数就返回一个迭代值，下次迭代时，代码从 yield b 的下一条语句继续执行，而函数的本地变量看起来和上次中断执行前是完全一样的，于是函数继续执行，直到再次遇到 yield。</p><p>一个带有 yield 的函数就是一个 generator，它和普通函数不同，生成一个 generator 看起来像函数调用，但不会执行任何函数代码，直到对其调用 next()（在 for 循环中会自动调用 next()）才开始执行。虽然执行流程仍按函数的流程执行，但每执行到一个 yield 语句就会中断，并返回一个迭代值，下次执行时从 yield 的下一个语句继续执行。看起来就好像一个函数在正常执行的过程中被 yield 中断了数次，每次中断都会通过 yield 返回当前的迭代值。</p><p>试了一下下面一段代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'wenchuan'</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line">    print(<span class="string">'fighting'</span>)</span><br><span class="line">c=h()</span><br><span class="line">c.__next__()</span><br><span class="line"><span class="comment"># &gt;&gt;&gt; c.__next__()</span></span><br><span class="line"><span class="comment"># webchuan</span></span><br><span class="line"><span class="comment"># 5</span></span><br><span class="line"><span class="comment"># &gt;&gt;&gt; c.__next__()</span></span><br><span class="line"><span class="comment"># fighting</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "&lt;stdin&gt;", line 1, in &lt;module&gt;</span></span><br><span class="line"><span class="comment"># StopIteration</span></span><br></pre></td></tr></table></figure><p>可以清晰的看到,执行第一次next()方法时,到yield就停止了,直到再次调用next(),打印出了fighting这个单词,然后抛出了迭代结束的异常<br>还有个send,慢慢消化,等我把selenium写完再回来补…</p><p>x.send()的作用是传递一个值给generator,可以根据值改变迭代器的状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">h</span><span class="params">(max)</span>:</span></span><br><span class="line">    n=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n&lt;max:</span><br><span class="line">        x=(<span class="keyword">yield</span> n)</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            n=x</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n+=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">x=h(<span class="number">1000</span>)</span><br><span class="line">x.__next__()</span><br><span class="line"><span class="number">0</span></span><br><span class="line">x.__next__()</span><br><span class="line"><span class="number">1</span></span><br><span class="line">......</span><br><span class="line">x.__next__()</span><br><span class="line"><span class="number">100</span></span><br><span class="line">x.send(<span class="number">500</span>)</span><br><span class="line"><span class="number">500</span></span><br><span class="line">x.__next__()</span><br><span class="line"><span class="number">501</span></span><br></pre></td></tr></table></figure><p>基本搞清楚这个东西怎么用了,下一节</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
          <category> yield </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Keras</title>
      <link href="/2017/05/16/keras/"/>
      <url>/2017/05/16/keras/</url>
      
        <content type="html"><![CDATA[<p>公司要做一个简单的机器学习项目,用来预测一些我们无法用因果关系推导出来的关系<br>简单看了看机器学习的一些相关知识,数学不好,理解不深,先学学框架怎么用吧,数学的事情,也只好慢慢来了<br>/(ㄒoㄒ)/~~<br><a id="more"></a><br>其实之前已经稍微做了一点,但是是生抄的代码<br>现在需要把训练模型稍微改一下,数据从原来的0/1变成了一个一维数组,正好结合之前抄的代码理解一下keras的用法<br>keras的使用方法大概就是下面这一段代码,建立模型,然后带入数据,models.fit(….)算就好了<br>关于深度学习,真有能力从原始的数学原理开始推导肯定是最好的<br>像我这种菜鸡,强烈推荐先把玩一下Google的<a href="http://playground.tensorflow.org/" title="TensorFlow playground" target="_blank" rel="noopener">TensorFlowPlayground</a>这个项目</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense,Activation</span><br><span class="line"><span class="comment"># For a single-input model with 2 classes (binary classification):</span></span><br><span class="line">model = Sequential()</span><br><span class="line">model.add(Dense(<span class="number">32</span>, activation=<span class="string">'relu'</span>, input_dim=<span class="number">100</span>))</span><br><span class="line">model.add(Dense(<span class="number">1</span>, activation=<span class="string">'sigmoid'</span>))</span><br><span class="line">model.compile(optimizer=<span class="string">'rmsprop'</span>,</span><br><span class="line">              loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"><span class="comment"># Generate dummy data</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = np.random.random((<span class="number">1000</span>, <span class="number">100</span>))</span><br><span class="line">labels = np.random.randint(<span class="number">2</span>, size=(<span class="number">1000</span>, <span class="number">1</span>))</span><br><span class="line"><span class="comment"># Train the model, iterating on the data in batches of 32 samples</span></span><br><span class="line">model.fit(data, labels, epochs=<span class="number">10</span>, batch_size=<span class="number">32</span>)</span><br></pre></td></tr></table></figure><p>这段代码其实就是一个完整的训练模型了,再略微思考思考吧,今天先简单写到这里.<br>好久没有更新博客,其实也没太多营养,慢慢积累吧,说不定哪一天也有人能顺着我的文章和思路解决一些入门的问题呢?</p><p>这里记录一个地址<a href="https://github.com/lakshayg/tensorflow-build" title="tensorflow-build" target="_blank" rel="noopener">tensorflow-build</a>,有编译后的TensorFlow包,据说是可以提速,用于生产环境,不过我在自己电脑上测试的性能也是有限…</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> keras </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keras </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker(1-3)</title>
      <link href="/2017/04/30/docker(1-3)/"/>
      <url>/2017/04/30/docker(1-3)/</url>
      
        <content type="html"><![CDATA[<p>抽空看一下<a href="https://www.docker.com/" title="Docker" target="_blank" rel="noopener">Docker</a><br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line">$ sudo yum install -y yum-utils</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">$ sudo yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 安装相关工具</span></span><br><span class="line">$ sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># 启动docker服务</span></span><br><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p><a href="https://docs.docker.com/get-started/" title="Orientation and Setup" target="_blank" rel="noopener">官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install \</span><br><span class="line">  apt-transport-https \</span><br><span class="line">  ca-certificates \</span><br><span class="line">  curl</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">       <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">       <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">       stable"</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br></pre></td></tr></table></figure><p>HelloWorld<br>网络原因可能会拉不到镜像,这里就可以考虑<a href="#改用镜像仓库" title="改用镜像仓库">改镜像仓库</a>了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br><span class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">78445dd45222: Pull complete </span><br><span class="line">Digest: sha256:c5515758d4c5e1e838e9cd307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</span><br><span class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"> $ docker run -it ubuntu bash</span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://cloud.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/engine/userguide/</span><br></pre></td></tr></table></figure><p>其他系统安装过程大差不差吧</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p><a href="https://docs.docker.com/get-started/part2/" title="Containers" target="_blank" rel="noopener">官方文档</a></p><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>新建一个文件夹存放相关的文件<br>首先是<code>Dockerfile</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use an official Python runtime as a base image</span></span><br><span class="line">FROM python:2.7-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the working directory to /app</span></span><br><span class="line">WORKDIR /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy the current directory contents into the container at /app</span></span><br><span class="line">ADD . /app</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install any needed packages specified in requirements.txt</span></span><br><span class="line">RUN pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make port 80 available to the world outside this container</span></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define environment variable</span></span><br><span class="line">ENV NAME World</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run app.py when the container launches</span></span><br><span class="line">CMD [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span><br></pre></td></tr></table></figure><blockquote><p>This Dockerfile refers to a couple of things we haven’t created yet, namely app.py and requirements.txt. Let’s get those in place next.</p></blockquote><p>然后是<code>requirements.txt</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Flask</span><br><span class="line">Redis</span><br></pre></td></tr></table></figure><p>最后是<code>app.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> Redis, RedisError</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect to Redis</span></span><br><span class="line">redis = Redis(host=<span class="string">"redis"</span>, db=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        visits = redis.incr(<span class="string">'counter'</span>)</span><br><span class="line">    <span class="keyword">except</span> RedisError:</span><br><span class="line">        visits = <span class="string">"&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;"</span></span><br><span class="line"></span><br><span class="line">    html = <span class="string">"&lt;h3&gt;Hello &#123;name&#125;!&lt;/h3&gt;"</span> \</span><br><span class="line">           <span class="string">"&lt;b&gt;Hostname:&lt;/b&gt; &#123;hostname&#125;&lt;br/&gt;"</span> \</span><br><span class="line">           <span class="string">"&lt;b&gt;Visits:&lt;/b&gt; &#123;visits&#125;"</span></span><br><span class="line">    <span class="keyword">return</span> html.format(name=os.getenv(<span class="string">'NAME'</span>, <span class="string">"world"</span>), hostname=socket.gethostname(), visits=visits)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h3 id="改用镜像仓库"><a href="#改用镜像仓库" class="headerlink" title="改用镜像仓库"></a>改用镜像仓库</h3><p>官方的仓库地址是在是太卡太卡太卡了,而且很容易断开,自己注册了一个阿里的,速度不很快但是还算稳定<br>这里是<a href="http://blog.csdn.net/qq_26091271/article/details/51501768" title="Docker学习笔记 — 配置国内免费registry mirror" target="_blank" rel="noopener">参考文章</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/default/docker</span><br><span class="line">DOCKER_OPTS=<span class="string">"--registry-mirror=http://registry.cn-hangzhou.aliyuncs.com/sayonara/private"</span></span><br><span class="line"><span class="comment"># 重启服务使配置生效</span></span><br><span class="line">$ service docker restart</span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">Dockerfile app.py requirements.txt</span><br><span class="line"><span class="comment"># 后面有个点,应该是当前路径的意思</span></span><br><span class="line">$ docker build -t friendlyhello .</span><br><span class="line">$ docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">friendlyhello       latest              8b3b8bb5ae50        20 seconds ago      194 MB</span><br><span class="line">python              2.7-slim            7fd4e5a52ace        3 days ago          182 MB</span><br><span class="line">hello-world         latest              48b5124b2768        3 months ago        1.84 kB</span><br></pre></td></tr></table></figure><h3 id="Run-the-app"><a href="#Run-the-app" class="headerlink" title="Run the app"></a>Run the app</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在容器内启动应用,并且将地址映射到外部的4000端口</span></span><br><span class="line"><span class="comment"># 这里应用起来了没问题,但是不知道为什么访问一直不正常,好像redis有点问题</span></span><br><span class="line">$ docker run -p 4000:80 friendlyhello</span><br><span class="line"> * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)</span><br><span class="line"><span class="comment"># 查看启动的docker应用</span></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                  NAMES</span><br><span class="line">d7c99c812184        friendlyhello       <span class="string">"python app.py"</span>     2 minutes ago       Up 2 minutes        0.0.0.0:4000-&gt;80/tcp   kind_bose</span><br><span class="line"><span class="comment"># 停止应用</span></span><br><span class="line">$ docker stop d7c99c812184</span><br></pre></td></tr></table></figure><h3 id="发布容器"><a href="#发布容器" class="headerlink" title="发布容器"></a>发布容器</h3><p>这个就类似npm和bower的发布了,私有库的话文档指向<a href="https://docs.docker.com/datacenter/dtr/2.2/guides/" title="Docker Trusted Registry" target="_blank" rel="noopener">Docker Trusted Registry</a>,用到了再看,懒得注册账号了,就记录一下命令吧</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker login</span><br><span class="line"><span class="comment"># Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.</span></span><br><span class="line">$ docker tag friendlyhello username/repository:tag</span><br><span class="line">$ docker push username/repository:tag</span><br><span class="line"><span class="comment"># 这里类似第一步docker run hello-world,从远程仓库直接启动容器</span></span><br><span class="line">$ docker run -p 4000:80 username/repository:tag</span><br></pre></td></tr></table></figure><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker build -t friendlyname .  <span class="comment"># Create image using this directory's Dockerfile</span></span><br><span class="line">docker run -p 4000:80 friendlyname  <span class="comment"># Run "friendlyname" mapping port 4000 to 80</span></span><br><span class="line">docker run -d -p 4000:80 friendlyname         <span class="comment"># Same thing, but in detached mode</span></span><br><span class="line">docker ps                                 <span class="comment"># See a list of all running containers</span></span><br><span class="line">docker stop &lt;<span class="built_in">hash</span>&gt;                     <span class="comment"># Gracefully stop the specified container</span></span><br><span class="line">docker ps -a           <span class="comment"># See a list of all containers, even the ones not running</span></span><br><span class="line">docker <span class="built_in">kill</span> &lt;<span class="built_in">hash</span>&gt;                   <span class="comment"># Force shutdown of the specified container</span></span><br><span class="line">docker rm &lt;<span class="built_in">hash</span>&gt;              <span class="comment"># Remove the specified container from this machine</span></span><br><span class="line">docker rm $(docker ps -a -q)           <span class="comment"># Remove all containers from this machine</span></span><br><span class="line">docker images -a                               <span class="comment"># Show all images on this machine</span></span><br><span class="line">docker rmi &lt;imagename&gt;            <span class="comment"># Remove the specified image from this machine</span></span><br><span class="line">docker rmi $(docker images -q)             <span class="comment"># Remove all images from this machine</span></span><br><span class="line">docker login             <span class="comment"># Log in this CLI session using your Docker credentials</span></span><br><span class="line">docker tag &lt;image&gt; username/repository:tag  <span class="comment"># Tag &lt;image&gt; for upload to registry</span></span><br><span class="line">docker push username/repository:tag            <span class="comment"># Upload tagged image to registry</span></span><br><span class="line">docker run username/repository:tag                   <span class="comment"># Run image from a registry</span></span><br></pre></td></tr></table></figure><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p><a href="https://docs.docker.com/get-started/part3/" title="Services" target="_blank" rel="noopener">官方文档</a></p><blockquote><p>In a distributed application, different pieces of the app are called “services.” For example, if you imagine a video sharing site, there will probably be a service for storing application data in a database, a service for video transcoding in the background after a user uploads something, a service for the front-end, and so on.</p></blockquote><blockquote><p>A service really just means, “containers in production.” A service only runs one image, but it codifies the way that image runs – what ports it should use, how many replicas of the container should run so the service has the capacity it needs, and so on. Scaling a service changes the number of container instances running that piece of software, assigning more computing resources to the service in the process.</p></blockquote><blockquote><p>Luckily it’s very easy to define, run, and scale services with the Docker platform – just write a docker-compose.yml file.</p></blockquote><p>部署服务大概是这样的过程</p><ol><li>创建一个容器</li><li>并且发布出来</li><li>通过<code>docker-compose.yml</code>配置服务</li><li>通过docker运行</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">username/repository:tag</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="attr">replicas:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">resources:</span></span><br><span class="line">        <span class="attr">limits:</span></span><br><span class="line">          <span class="attr">cpus:</span> <span class="string">"0.1"</span></span><br><span class="line">          <span class="attr">memory:</span> <span class="string">50M</span></span><br><span class="line">      <span class="attr">restart_policy:</span></span><br><span class="line">        <span class="attr">condition:</span> <span class="string">on-failure</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">webnet</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">webnet:</span></span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code>这个文件告诉Docker做五件事</p><ol><li>启动五个指定的容器线程,命名为<code>web</code>,限制每个线程最多占用10%的CPU资源和50MB的内存</li><li>服务故障立刻重启</li><li>映射服务器的80端口到服务的80端口</li><li>通过<code>webnet</code>进行负载均衡,容器通过临时端口(an ephemeral port)将自己发布到<code>web</code>服务的80端口</li><li>使用默认设置定义<code>webnet</code>(负载均衡网络)</li></ol><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>使用<code>docker stack deploy</code>命令之前需要先执行下列命令,否则将提示<code>this node is not a swarm manager</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker swarm init</span><br><span class="line"><span class="comment"># 部署</span></span><br><span class="line">$ docker stack deploy -c docker-compose.yml getstartedlab</span><br><span class="line"><span class="comment"># 查看加载的容器列表</span></span><br><span class="line">$ docker stack ps getstartedlab</span><br></pre></td></tr></table></figure><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>直接修改<code>docker-compose.yml</code>文件,重新部署服务,即可扩展应用的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker会自动更新配置,不需要停掉现有的服务</span></span><br><span class="line">$ docker stack deploy -c docker-compose.yml getstartedlab</span><br><span class="line"><span class="comment"># Take down the app</span></span><br><span class="line">$ docker stack rm getstartedlab</span><br></pre></td></tr></table></figure><h3 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker stack ls              <span class="comment"># List all running applications on this Docker host</span></span><br><span class="line">docker stack deploy -c &lt;composefile&gt; &lt;appname&gt;  <span class="comment"># Run the specified Compose file</span></span><br><span class="line">docker stack services &lt;appname&gt;       <span class="comment"># List the services associated with an app</span></span><br><span class="line">docker stack ps &lt;appname&gt;   <span class="comment"># List the running containers associated with an app</span></span><br><span class="line">docker stack rm &lt;appname&gt;                             <span class="comment"># Tear down an application</span></span><br></pre></td></tr></table></figure><p>先写到这里,集群什么的用到了再说…感觉这是运维的东西</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行中打开Vscode</title>
      <link href="/2017/04/28/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E6%89%93%E5%BC%80vscode/"/>
      <url>/2017/04/28/%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E6%89%93%E5%BC%80vscode/</url>
      
        <content type="html"><![CDATA[<p>不停的敲命令其实很麻烦,尤其mac下面的文件系统不是很习惯,每次用vscode打开一个文件夹时要搞半天,很是不方便<br>试了一下alias(同义词),感觉非常好用<br><a id="more"></a><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">$ vim ~/.bash_profile</span><br><span class="line"><span class="comment"># 添加如下内容</span></span><br><span class="line"><span class="comment"># vsc打开vscode文件</span></span><br><span class="line"><span class="built_in">alias</span> vsc=<span class="string">"'/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code'"</span></span><br><span class="line"><span class="comment"># 定义vsc-hexo命令,输入即可打开vscode并且打开hexo路径,其他文件配置相同</span></span><br><span class="line"><span class="built_in">alias</span> vsc-hexo=<span class="string">"vsc /Users/liudongmeng/Documents/GitHub/Hexo/"</span></span><br></pre></td></tr></table></figure></p><p>同样可以配置一些ssh的同义词,不用每次都用户名+ip输半天,我反正切换不太过来…</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 命令配置 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2017-04-27</title>
      <link href="/2017/04/27/2017-04-27/"/>
      <url>/2017/04/27/2017-04-27/</url>
      
        <content type="html"><![CDATA[<p>晚上随便看点东西,心情不好吃吃吃,收拾收拾,就墨迹到这个点了<br><a id="more"></a><br>装了个VPN连到公司,找了个remote desktop工具准备远程到自己电脑上看看,然后就发现自己电脑ping不通…<br>貌似是休眠了囧,考虑一下五一要不要开一个假期,不过80还是能连上的<br>现在也没心情处理那个unixODBC的问题…被web整的一头包<br>磨磨唧唧做了一天,结果下班的时候全都回滚了.<br>有点递归的依赖关系+异步/同步的控制,真是不会啊…烦的要死<br>不是不理解为什么异步,就是不知道在不确定有多少个then的情况下怎么写这个代码…<br>然后爬虫最近没看,NLP也没看,ML也没看,算法也没看……<br>几个网站什么的先记下来吧,一堆一堆的东西,根本看不过来😔<br><a href="https://www.coursera.org/" title="Coursera|OnlineCoursesFromTopUniversities.JoinforFree" target="_blank" rel="noopener">Coursera|OnlineCoursesFromTopUniversities.JoinforFree</a><br><a href="https://www.coursera.org/learn/machine-learning" title="MachineLearning-StanfordUniversity|Coursera" target="_blank" rel="noopener">MachineLearning-StanfordUniversity|Coursera</a><br><a href="https://www.ted.com" title="TED:Ideasworthspreading" target="_blank" rel="noopener">TED:Ideasworthspreading</a><br><a href="http://www.csie.ntu.edu.tw/~htlin/mooc/" title="mooc" target="_blank" rel="noopener">mooc</a><br>拿了两本书回来垫枕头<br>心情很糟,很低落,很失落,有点暴躁,有点狂躁<br>日复一日</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
          <category> 吐槽 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NLTK-自动化语义标注</title>
      <link href="/2017/04/17/NLTK-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AF%AD%E4%B9%89%E6%A0%87%E6%B3%A8/"/>
      <url>/2017/04/17/NLTK-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AF%AD%E4%B9%89%E6%A0%87%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<p>简单看了一下第四章,没看太懂,边写边做理解理解看<br><a id="more"></a></p><h1 id="英文词干提取器"><a href="#英文词干提取器" class="headerlink" title="英文词干提取器"></a>英文词干提取器</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>porter = nltk.PorterStemmer()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>porter.stem(<span class="string">'lying'</span>)</span><br><span class="line"><span class="string">u'lie'</span></span><br></pre></td></tr></table></figure><h1 id="词性标注器"><a href="#词性标注器" class="headerlink" title="词性标注器"></a>词性标注器</h1><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text = nltk.word_tokenize(<span class="string">"And now for something completely different"</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nltk.pos_tag(text)</span><br><span class="line">[(<span class="string">'And'</span>, <span class="string">'CC'</span>), (<span class="string">'now'</span>, <span class="string">'RB'</span>), (<span class="string">'for'</span>, <span class="string">'IN'</span>), (<span class="string">'something'</span>, <span class="string">'NN'</span>), (<span class="string">'completely'</span>, <span class="string">'RB'</span>), (<span class="string">'different'</span>, <span class="string">'JJ'</span>)]</span><br></pre></td></tr></table></figure><p>其中CC是连接词，RB是副词，IN是介词，NN是名次，JJ是形容词<br>这是一句完整的话，实际上pos_tag是处理一个词序列，会根据句子来动态判断，比如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nltk.pos_tag([<span class="string">'i'</span>,<span class="string">'love'</span>,<span class="string">'you'</span>])`</span><br><span class="line">[(<span class="string">'i'</span>, <span class="string">'NN'</span>), (<span class="string">'love'</span>, <span class="string">'VBP'</span>), (<span class="string">'you'</span>, <span class="string">'PRP'</span>)]</span><br></pre></td></tr></table></figure><p>这里的love识别为动词<br>而：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nltk.pos_tag([<span class="string">'love'</span>,<span class="string">'and'</span>,<span class="string">'hate'</span>])</span><br><span class="line">[(<span class="string">'love'</span>, <span class="string">'NN'</span>), (<span class="string">'and'</span>, <span class="string">'CC'</span>), (<span class="string">'hate'</span>, <span class="string">'NN'</span>)]</span><br></pre></td></tr></table></figure><p>这里的love识别为名词<br>nltk中多数都是英文的词性标注语料库，如果我们想自己标注一批语料库该怎么办呢？<br>nltk提供了比较方便的方法：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tagged_token = nltk.tag.str2tuple(<span class="string">'fly/NN'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tagged_token</span><br><span class="line">(<span class="string">'fly'</span>, <span class="string">'NN'</span>)</span><br></pre></td></tr></table></figure><p>这里的nltk.tag.str2tuple可以把fly/NN这种字符串转成一个二元组，事实上nltk的语料库中都是这种字符串形式的标注，那么我们如果把语料库标记成：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>sent=<span class="string">'我/NN 是/IN 一个/AT 大/JJ 傻逼/NN'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[nltk.tag.str2tuple(t) <span class="keyword">for</span> t <span class="keyword">in</span> sent.split()]</span><br><span class="line">[(<span class="string">'\xe6\x88\x91'</span>, <span class="string">'NN'</span>), (<span class="string">'\xe6\x98\xaf'</span>, <span class="string">'IN'</span>), (<span class="string">'\xe4\xb8\x80\xe4\xb8\xaa'</span>, <span class="string">'AT'</span>), (<span class="string">'\xe5\xa4\xa7'</span>, <span class="string">'JJ'</span>), (<span class="string">'\xe5\x82\xbb\xe9\x80\xbc'</span>, <span class="string">'NN'</span>)]</span><br></pre></td></tr></table></figure><p>这么说来，中文也是可以支持的，恩~<br>我们来看一下布朗语料库中的标注：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>nltk.corpus.brown.tagged_words()</span><br><span class="line">[(<span class="string">u'The'</span>, <span class="string">u'AT'</span>), (<span class="string">u'Fulton'</span>, <span class="string">u'NP-TL'</span>), ...]</span><br></pre></td></tr></table></figure><p>事实上nltk也有中文的语料库，我们来下载下来<br>执行</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nltk.download()</span><br></pre></td></tr></table></figure><p>选择Corpora里的sinica_treebank下载<br>sinica就是台湾话中的中国研究院<br>我们看一下这个中文语料库里有什么内容，创建cn_tag.py，内容如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(sys)</span><br><span class="line">&lt;module <span class="string">'sys'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> word <span class="keyword">in</span> nltk.corpus.sinica_treebank.tagged_words():</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">print</span> word[<span class="number">0</span>],word[<span class="number">1</span>]</span><br><span class="line">...</span><br><span class="line">持 VC2</span><br><span class="line">有效期 Nad</span><br><span class="line">國際 Ncc</span><br><span class="line">學生證 Nab</span><br><span class="line">ＩＳＩＣ Nba</span><br><span class="line">、 Caa</span><br><span class="line">ＳＴＡ Nba</span><br><span class="line">青年證 Nab</span><br><span class="line">、 Caa</span><br><span class="line">ＳＴＡ Nba</span><br><span class="line">會員證 Nab</span><br></pre></td></tr></table></figure><p>第一列是中文的词汇，第二列是标注好的词性<br>我们发现这里面都是繁体，因为是基于台湾的语料生成的，想要简体中文还得自己想办法。不过有人已经帮我们做了这部分工作，那就是<a href="https://github.com/fxsjy/jieba" title="结巴切词" target="_blank" rel="noopener">jieba切词</a>，强烈推荐，可以自己加载自己的语料，进行中文切词，并且能够自动做词性标注</p><h1 id="词性自动标注"><a href="#词性自动标注" class="headerlink" title="词性自动标注"></a>词性自动标注</h1><p>面对一片新的语料库(比如我们从未处理过中文，只有一批批的中文语料，现在让我们做词性自动标注)，如何实现词性自动标注？有如下几种标注方法：</p><p>默认标注器：不管什么词，都标注为频率最高的一种词性。比如经过分析，所有中文语料里的词是名次的概率是13%最大，那么我们的默认标注器就全部标注为名次。这种标注器一般作为其他标注器处理之后的最后一道门，即：不知道是什么词？那么他是名次。默认标注器用DefaultTagger来实现，具体用法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>reload(sys)</span><br><span class="line">&lt;module <span class="string">'sys'</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>default_tagger = nltk.DefaultTagger(<span class="string">'NN'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>raw = <span class="string">'我勒个去'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tokens = nltk.word_tokenize(raw)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tags = default_tagger.tag(tokens)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> tags</span><br><span class="line">[(<span class="string">'\xe6\x88\x91\xe5\x8b\x92\xe4\xb8\xaa\xe5\x8e\xbb'</span>, <span class="string">'NN'</span>)]</span><br></pre></td></tr></table></figure><p>正则表达式标注器：满足特定正则表达式的认为是某种词性，比如凡是带“们”的都认为是代词(PRO)。正则表达式标注器通RegexpTagge实现，用法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>pattern = [(<span class="string">r'.*们$'</span>,<span class="string">'PRO'</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tagger = nltk.RegexpTagger(pattern)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> tagger.tag(nltk.word_tokenize(<span class="string">'我们 累 个 去 你们 和 他们 啊'</span>))</span><br><span class="line">[(<span class="string">'\xe6\x88\x91\xe4\xbb\xac'</span>, <span class="string">'PRO'</span>), (<span class="string">'\xe7\xb4\xaf'</span>, <span class="literal">None</span>), (<span class="string">'\xe4\xb8\xaa'</span>, <span class="literal">None</span>), (<span class="string">'\xe5\x8e\xbb'</span>, <span class="literal">None</span>), (<span class="string">'\xe4\xbd\xa0\xe4\xbb\xac'</span>, <span class="string">'PRO'</span>), (<span class="string">'\xe5\x92\x8c'</span>, <span class="literal">None</span>), (<span class="string">'\xe4\xbb\x96\xe4\xbb\xac'</span>, <span class="string">'PRO'</span>), (<span class="string">'\xe5\x95\x8a'</span>, <span class="literal">None</span>)]</span><br></pre></td></tr></table></figure><p>查询标注器：找出最频繁的n个词以及它的词性，然后用这个信息去查找语料库，匹配的就标记上，剩余的词使用默认标注器(回退)。这一般使用一元标注的方式，见下面。</p><p>一元标注：基于已经标注的语料库做训练，然后用训练好的模型来标注新的语料，使用方法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> brown</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tagged_sents = [[(<span class="string">'我'</span>,<span class="string">'PRO'</span>),(<span class="string">'小兔'</span>,<span class="string">'NN'</span>)]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>unigram_tagger = nltk.UnigramTagger(tagged_sents)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sents = brown.sents(categories=<span class="string">'news'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sents = [[<span class="string">'我'</span>,<span class="string">'你'</span>,<span class="string">'小兔'</span>]]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tags = unigram_tagger.tag(sents[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> tags</span><br><span class="line">[(<span class="string">'\xe6\x88\x91'</span>, <span class="string">'PRO'</span>), (<span class="string">'\xe4\xbd\xa0'</span>, <span class="literal">None</span>), (<span class="string">'\xe5\xb0\x8f\xe5\x85\x94'</span>, <span class="string">'NN'</span>)]</span><br></pre></td></tr></table></figure><p>这里的tagged_sents是用于训练的语料库，我们也可以直接用已有的标注好的语料库，比如：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brown_tagged_sents = brown.tagged_sents(categories=<span class="string">'news'</span>)</span><br></pre></td></tr></table></figure><p>二元标注和多元标注：一元标注指的是只考虑当前这个词，不考虑上下文。二元标注器指的是考虑它前面的词的标注，用法只需要把上面的UnigramTagger换成BigramTagger。同理三元标注换成TrigramTagger</p><p>组合标注器：为了提高精度和覆盖率，我们对多种标注器组合，比如组合二元标注器、一元标注器和默认标注器，如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t0 = nltk.DefaultTagger(<span class="string">'NN'</span>)</span><br><span class="line">t1 = nltk.UnigramTagger(train_sents, backoff=t0)</span><br><span class="line">t2 = nltk.BigramTagger(train_sents, backoff=t1)</span><br></pre></td></tr></table></figure><p>标注器的存储：训练好的标注器为了持久化，可以存储到硬盘，具体方法如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> cPickle <span class="keyword">import</span> dump</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output = open(<span class="string">'t2.pkl'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dump(t2, output, <span class="number">-1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>output.close()</span><br></pre></td></tr></table></figure><p>使用时也可以加载，如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> cPickle <span class="keyword">import</span> load</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>input = open(<span class="string">'t2.pkl'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tagger = load(input)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>input.close()</span><br></pre></td></tr></table></figure><h1 id="结巴切词"><a href="#结巴切词" class="headerlink" title="结巴切词"></a>结巴切词</h1><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><p>直接拷贝了<a href="https://github.com/fxsjy/jieba/blob/master/README.md" title="使用说明" target="_blank" rel="noopener">使用说明</a>里面的例子</p><ul><li>jieba.cut 方法接受三个输入参数: 需要分词的字符串；cut_all 参数用来控制是否采用全模式；HMM 参数用来控制是否使用 HMM 模型</li><li>jieba.cut_for_search 方法接受两个参数：需要分词的字符串；是否使用 HMM 模型。该方法适合用于搜索引擎构建倒排索引的分词，粒度比较细</li><li>待分词的字符串可以是 unicode 或 UTF-8 字符串、GBK 字符串。注意：不建议直接输入 GBK 字符串，可能无法预料地错误解码成 UTF-8</li><li>jieba.cut 以及 jieba.cut_for_search 返回的结构都是一个可迭代的 generator，可以使用 for 循环来获得分词后得到的每一个词语(unicode)，或者用</li><li>jieba.lcut 以及 jieba.lcut_for_search 直接返回 list</li><li>jieba.Tokenizer(dictionary=DEFAULT_DICT) 新建自定义分词器，可用于同时使用不同词典。jieba.dt 为默认分词器，所有全局分词相关函数都是该分词器的映射。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jieba</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line">print(<span class="string">"Full Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 全模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"我来到北京清华大学"</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line">print(<span class="string">"Default Mode: "</span> + <span class="string">"/ "</span>.join(seg_list))  <span class="comment"># 精确模式</span></span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut(<span class="string">"他来到了网易杭研大厦"</span>)  <span class="comment"># 默认是精确模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">"小明硕士毕业于中国科学院计算所，后在日本京都大学深造"</span>)  <span class="comment"># 搜索引擎模式</span></span><br><span class="line">print(<span class="string">", "</span>.join(seg_list))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span><br><span class="line"></span><br><span class="line">【精确模式】: 我/ 来到/ 北京/ 清华大学</span><br><span class="line"></span><br><span class="line">【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)</span><br><span class="line"></span><br><span class="line">【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</span><br></pre></td></tr></table></figure><h2 id="载入词典"><a href="#载入词典" class="headerlink" title="载入词典"></a>载入词典</h2><p>开发者可以指定自己自定义的词典，以便包含 jieba 词库里没有的词。虽然 jieba 有新词识别能力，但是自行添加新词可以保证更高的正确率<br>用法： <code>jieba.load_userdict(file_name) # file_name</code>为文件类对象或自定义词典的路径<br>词典格式和 dict.txt 一样，一个词占一行；每一行分三部分：词语、词频（可省略）、词性（可省略），用空格隔开，顺序不可颠倒。file_name 若为路径或二进制方式打开的文件，则文件必须为 UTF-8 编码。<br>词频省略时使用自动计算的能保证分出该词的词频。</p><p>今天先看到这里,慢慢消化,回头回来补</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> NLTK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> NLTK </tag>
            
            <tag> 聊天机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NLTK</title>
      <link href="/2017/04/09/NLTK/"/>
      <url>/2017/04/09/NLTK/</url>
      
        <content type="html"><![CDATA[<p>网上找了篇看起来挺丰富的文章<a href="http://www.shareditor.com/bloglistbytag/?tagname=%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%81%9A%E8%81%8A%E5%A4%A9%E6%9C%BA%E5%99%A8%E4%BA%BA" title="自己动手做聊天机器人" target="_blank" rel="noopener">自己动手做聊天机器人</a>,学着做QA,<br>来源网站:<a href="http://www.shareditor.com/" title="shareditor" target="_blank" rel="noopener">shareditor</a><br>book的下载地址来自于:<a href="http://www.jianshu.com/p/9c48e8edc7aa" title="解决NLTK包下载出错问题及NLP环境测试" target="_blank" rel="noopener">解决NLTK包下载出错问题及NLP环境测试</a><br><a id="more"></a><br><a href="http://www.nltk.org/" title="NLTK" target="_blank" rel="noopener">NLTK</a>:Natural Language Toolkit</p><h1 id="NLTK库"><a href="#NLTK库" class="headerlink" title="NLTK库"></a>NLTK库</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 老样子,切换到ENV环境装</span></span><br><span class="line">$ <span class="built_in">source</span> ENV/bin/activate</span><br><span class="line"><span class="comment"># 安装nltk包</span></span><br><span class="line">$ pip install nltk</span><br><span class="line"><span class="comment"># 安装完成之后可以在python里面启动downloader下载相关资源</span></span><br><span class="line"><span class="comment"># 试了一下下载及其不靠谱,翻墙也各种报错,还是网上找资源吧</span></span><br><span class="line">$ python</span><br><span class="line">Python 2.7.10 (default, Feb  6 2017, 23:53:20)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 8.0.0 (clang-800.0.34)] on darwin</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p>资源下载地址:<br><a href="https://pan.baidu.com/s/1slP4wfr" title="下载地址1：云盘密码znx7" target="_blank" rel="noopener">下载地址1：云盘密码znx7</a><br><a href="http://pan.baidu.com/s/1qYwA240" title="下载地址2：云盘密码4cp3" target="_blank" rel="noopener">下载地址2：云盘密码4cp3</a><br>来源:<br><a href="http://www.jianshu.com/p/9c48e8edc7aa" title="解决NLTK包下载出错问题及NLP环境测试" target="_blank" rel="noopener">解决NLTK包下载出错问题及NLP环境测试</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> nltk</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>nltk.download()</span><br><span class="line"><span class="comment"># 下载好资源之后导入book</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> nltk.book <span class="keyword">import</span> *</span><br><span class="line">*** Introductory Examples <span class="keyword">for</span> the NLTK Book ***</span><br><span class="line">Loading text1, ..., text9 <span class="keyword">and</span> sent1, ..., sent9</span><br><span class="line">Type the name of the text <span class="keyword">or</span> sentence to view it.</span><br><span class="line">Type: <span class="string">'texts()'</span> <span class="keyword">or</span> <span class="string">'sents()'</span> to list the materials.</span><br><span class="line">text1: Moby Dick by Herman Melville <span class="number">1851</span></span><br><span class="line">text2: Sense <span class="keyword">and</span> Sensibility by Jane Austen <span class="number">1811</span></span><br><span class="line">text3: The Book of Genesis</span><br><span class="line">text4: Inaugural Address Corpus</span><br><span class="line">text5: Chat Corpus</span><br><span class="line">text6: Monty Python <span class="keyword">and</span> the Holy Grail</span><br><span class="line">text7: Wall Street Journal</span><br><span class="line">text8: Personals Corpus</span><br><span class="line">text9: The Man Who Was Thursday by G . K . Chesterton <span class="number">1908</span></span><br><span class="line"><span class="comment"># 这里面的text*都是一个一个的书籍节点，直接输入text1会输出书籍标题：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>text1</span><br><span class="line">&lt;Text: Moby Dick by Herman Melville <span class="number">1851</span>&gt;</span><br></pre></td></tr></table></figure><p>到这里为止,环境安装工作完成</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text1.concordance(<span class="string">"former"</span>)</span><br><span class="line">Displaying <span class="number">20</span> of <span class="number">20</span> matches:</span><br><span class="line">s of the sea , appeared . Among the former , one was of a most monstrous size</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>会显示20个包含former的语句上下文<br>我们还可以搜索相关词，比如：<br>输入了ship，查找了boat，都是近义词</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text1.similar(<span class="string">"ship"</span>)</span><br><span class="line">whale boat sea captain world way head time crew man other pequod line</span><br><span class="line">deck body fishery air boats side voyage</span><br></pre></td></tr></table></figure><p>输入了ship，查找了boat，都是近义词<br>我们还可以查看某个词在文章里出现的位置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跑了一遍发现缺少包所以报错,这里需要安装matplotlib</span></span><br><span class="line">pip install matplotlib</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>text4.dispersion_plot([<span class="string">"citizens"</span>, <span class="string">"democracy"</span>, <span class="string">"freedom"</span>, <span class="string">"duties"</span>, <span class="string">"America"</span>])</span><br></pre></td></tr></table></figure><p>跑出来应该是下面这个样子<img src="dispersion_plot.png" alt="dispersion_plot"></p><h2 id="词统计"><a href="#词统计" class="headerlink" title="词统计"></a>词统计</h2><ul><li>len(text1):返回总字数</li><li>set(text1):返回文本的所有词集合</li><li>len(set(text4)):返回文本总词数</li><li>text4.count(“is”):返回“is”这个词出现的总次数</li><li>FreqDist(text1):统计文章的词频并按从大到小排序存到一个列表里</li><li>fdist1 = FreqDist(text1);fdist1.plot(50, cumulative=True):统计词频，并输出累计图像<img src="fdist1.png" alt="fdist1"></li><li>fdist1.hapaxes():返回只出现一次的词</li><li>text4.collocations():频繁的双联词</li></ul><h2 id="自然语言处理关键点-照抄章节"><a href="#自然语言处理关键点-照抄章节" class="headerlink" title="自然语言处理关键点(照抄章节)"></a>自然语言处理关键点(照抄章节)</h2><blockquote><p>词意理解：中国队大胜美国队；中国队大败美国队。“胜”、“败”一对反义词，却表达同样的意思：中国赢了，美国输了。这需要机器能够自动分析出谁胜谁负</p></blockquote><blockquote><p>自动生成语言：自动生成语言基于语言的自动理解，不理解就无法自动生成</p></blockquote><blockquote><p>机器翻译：现在机器翻译已经很多了，但是还很难达到最佳，比如我们把中文翻译成英文，再翻译成中文，再翻译成英文，来回10轮，发现和最初差别还是非常大的。</p></blockquote><blockquote><p>人机对话：这也是我们想做到的最终目标，这里有一个叫做“图灵测试”的方式，也就是在5分钟之内回答提出问题的30%即通过，能通过则认为有智能了。</p></blockquote><blockquote><p>自然语言处理分两派，一派是基于规则的，也就是完全从语法句法等出发，按照语言的规则来分析和处理，这在上个世纪经历了很多年的试验宣告失败，因为规则太多太多，而且很多语言都不按套路出牌，想象你追赶你的影子，你跑的快他跑的更快，你永远都追不上它。另一派是基于统计的，也就是收集大量的语料数据，通过统计学习的方式来理解语言，这在当代越来越受重视而且已经成为趋势，因为随着硬件技术的发展，大数据存储和计算已经不是问题，无论有什么样的规则，语言都是有统计规律的，当然基于统计也存在缺陷，那就是“小概率事件总是不会发生的”导致总有一些问题解决不了。</p></blockquote><p>到此为止的理解,NLTK就如字面意思,其实是一个toolkit,提供了很多现成的算法类的工具</p><h1 id="语料与词汇资源"><a href="#语料与词汇资源" class="headerlink" title="语料与词汇资源"></a>语料与词汇资源</h1><blockquote><p>当代自然语言处理都是基于统计的，统计自然需要很多样本，因此语料和词汇资源是必不可少的，本节介绍语料和词汇资源的重要性和获取方式</p></blockquote><h2 id="NLTK语料库"><a href="#NLTK语料库" class="headerlink" title="NLTK语料库"></a>NLTK语料库</h2><p>Gutenberg语料库</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 返回Gutenberg语料库的文件标识符</span></span><br><span class="line">nltk.corpus.gutenberg.fileids()</span><br><span class="line">[<span class="string">'austen-emma.txt'</span>, <span class="string">'austen-persuasion.txt'</span>, <span class="string">'austen-sense.txt'</span>, <span class="string">'bible-kjv.txt'</span>, <span class="string">'blake-poems.txt'</span>, <span class="string">'bryant-stories.txt'</span>, <span class="string">'burgess-busterbrown.txt'</span>, <span class="string">'carroll-alice.txt'</span>, <span class="string">'chesterton-ball.txt'</span>, <span class="string">'chesterton-brown.txt'</span>, <span class="string">'chesterton-thursday.txt'</span>, <span class="string">'edgeworth-parents.txt'</span>, <span class="string">'melville-moby_dick.txt'</span>, <span class="string">'milton-paradise.txt'</span>, <span class="string">'shakespeare-caesar.txt'</span>, <span class="string">'shakespeare-hamlet.txt'</span>, <span class="string">'shakespeare-macbeth.txt'</span>, <span class="string">'whitman-leaves.txt'</span>]</span><br></pre></td></tr></table></figure><p>nltk.corpus.gutenberg就是gutenberg语料库的阅读器，它有很多实用的方法，比如：</p><ul><li>nltk.corpus.gutenberg.raw(‘chesterton-brown.txt’)：输出chesterton-brown.txt文章的原始内容</li><li>nltk.corpus.gutenberg.words(‘chesterton-brown.txt’)：输出chesterton-brown.txt文章的单词列表</li><li>nltk.corpus.gutenberg.sents(‘chesterton-brown.txt’)：输出chesterton-brown.txt文章的句子列表</li></ul><p>类似的语料库还有：</p><ul><li>from nltk.corpus import webtext：网络文本语料库，网络和聊天文本</li><li>from nltk.corpus import brown：布朗语料库，按照文本分类好的500个不同来源的文本</li><li>from nltk.corpus import reuters：路透社语料库，1万多个新闻文档</li><li>from nltk.corpus import inaugural：就职演说语料库，55个总统的演说</li></ul><h2 id="语料库的一般结构"><a href="#语料库的一般结构" class="headerlink" title="语料库的一般结构"></a>语料库的一般结构</h2><p>以上各种语料库都是分别建立的，因此会稍有一些区别，但是不外乎以下几种组织结构：散养式（孤立的多篇文章）、分类式（按照类别组织，相互之间没有交集）、交叉式（一篇文章可能属于多个类）、渐变式（语法随着时间发生变化）</p><h2 id="语料库的通用接口"><a href="#语料库的通用接口" class="headerlink" title="语料库的通用接口"></a>语料库的通用接口</h2><ul><li>fileids()：返回语料库中的文件</li><li>categories()：返回语料库中的分类</li><li>raw()：返回语料库的原始内容</li><li>words()：返回语料库中的词汇</li><li>sents()：返回语料库句子</li><li>abspath()：指定文件在磁盘上的位置</li><li>open()：打开语料库的文件流</li></ul><h2 id="加载自己的语料库"><a href="#加载自己的语料库" class="headerlink" title="加载自己的语料库"></a>加载自己的语料库</h2><p>收集自己的语料文件（文本文件）到某路径下（比如/tmp)，然后执行：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> PlaintextCorpusReader</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>corpus_root = <span class="string">'/tmp'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wordlists = PlaintextCorpusReader(corpus_root, <span class="string">'.*'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>wordlists.fileids()</span><br></pre></td></tr></table></figure><p>就可以列出自己语料库的各个文件了，也可以使用如wordlists.sents(‘a.txt’)和wordlists.words(‘a.txt’)等方法来获取句子和词信息</p><h2 id="条件频率分布"><a href="#条件频率分布" class="headerlink" title="条件频率分布"></a>条件频率分布</h2><p>条件分布大家都比较熟悉了，就是在一定条件下某个事件的概率分布。自然语言的条件频率分布就是指定条件下某个事件的频率分布。</p><p>比如要输出在布朗语料库中每个类别条件下每个词的概率：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( <span class="string">"utf-8"</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"><span class="keyword">from</span> nltk.corpus <span class="keyword">import</span> brown</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链表推导式，genre是brown语料库里的所有类别列表，word是这个类别中的词汇列表</span></span><br><span class="line"><span class="comment"># (genre, word)就是类别加词汇对</span></span><br><span class="line">genre_word = [(genre, word)</span><br><span class="line">        <span class="keyword">for</span> genre <span class="keyword">in</span> brown.categories()</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> brown.words(categories=genre)</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建条件频率分布</span></span><br><span class="line">cfd = nltk.ConditionalFreqDist(genre_word)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定条件和样本作图</span></span><br><span class="line">cfd.plot(conditions=[<span class="string">'news'</span>,<span class="string">'adventure'</span>], samples=[<span class="string">u'stock'</span>, <span class="string">u'sunbonnet'</span>, <span class="string">u'Elevated'</span>, <span class="string">u'narcotic'</span>, <span class="string">u'four'</span>, <span class="string">u'woods'</span>, <span class="string">u'railing'</span>, <span class="string">u'Until'</span>, <span class="string">u'aggression'</span>, <span class="string">u'marching'</span>, <span class="string">u'looking'</span>, <span class="string">u'eligible'</span>, <span class="string">u'electricity'</span>, <span class="string">u'$25-a-plate'</span>, <span class="string">u'consulate'</span>, <span class="string">u'Casey'</span>, <span class="string">u'all-county'</span>, <span class="string">u'Belgians'</span>, <span class="string">u'Western'</span>, <span class="string">u'1959-60'</span>, <span class="string">u'Duhagon'</span>, <span class="string">u'sinking'</span>, <span class="string">u'1,119'</span>, <span class="string">u'co-operation'</span>, <span class="string">u'Famed'</span>, <span class="string">u'regional'</span>, <span class="string">u'Charitable'</span>, <span class="string">u'appropriation'</span>, <span class="string">u'yellow'</span>, <span class="string">u'uncertain'</span>, <span class="string">u'Heights'</span>, <span class="string">u'bringing'</span>, <span class="string">u'prize'</span>, <span class="string">u'Loen'</span>, <span class="string">u'Publique'</span>, <span class="string">u'wooden'</span>, <span class="string">u'Loeb'</span>, <span class="string">u'963'</span>, <span class="string">u'specialties'</span>, <span class="string">u'Sands'</span>, <span class="string">u'succession'</span>, <span class="string">u'Paul'</span>, <span class="string">u'Phyfe'</span>])</span><br></pre></td></tr></table></figure><p><img src="ntlk_ConditionalFreqDist.png" alt="ntlk.ConditionalFreqDist"></p><blockquote><p>注意：这里如果把plot直接换成tabulate ，那么就是输出表格形式，和图像表达的意思相同</p></blockquote><p>我们还可以利用条件频率分布，按照最大条件概率生成双连词，最终生成一个随机文本</p><p>这可以直接使用bigrams()函数，它的功能是生成词对链表。</p><p>创建python文件如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding( <span class="string">"utf-8"</span> )</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> nltk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环10次，从cfdist中取当前单词最大概率的连词,并打印出来</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_model</span><span class="params">(cfdist, word, num=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        <span class="keyword">print</span> word,</span><br><span class="line">        word = cfdist[word].max()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载语料库</span></span><br><span class="line">text = nltk.corpus.genesis.words(<span class="string">'english-kjv.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成双连词</span></span><br><span class="line">bigrams = nltk.bigrams(text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成条件频率分布</span></span><br><span class="line">cfd = nltk.ConditionalFreqDist(bigrams)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以the开头，生成随机串</span></span><br><span class="line">generate_model(cfd, <span class="string">'the'</span>)</span><br></pre></td></tr></table></figure><p>执行效果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the land of the land of the land of the</span><br></pre></td></tr></table></figure><p>the的最大概率的双连词是land，land最大概率双连词是of，of最大概率双连词是the，所以后面就循环了</p><h2 id="其他词典资源"><a href="#其他词典资源" class="headerlink" title="其他词典资源"></a>其他词典资源</h2><p>有一些仅是词或短语以及一些相关信息的集合，叫做词典资源。</p><ul><li>词汇列表语料库：nltk.corpus.words.words()，所有英文单词，这个可以用来识别语法错误</li><li>停用词语料库：nltk.corpus.stopwords.words，用来识别那些最频繁出现的没有意义的词</li><li>发音词典：nltk.corpus.cmudict.dict()，用来输出每个英文单词的发音</li><li>比较词表：nltk.corpus.swadesh，多种语言核心200多个词的对照，可以作为语言翻译的基础</li><li>同义词集：WordNet，面向语义的英语词典，由同义词集组成，并组织成一个网络</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> NLTK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> NLTK </tag>
            
            <tag> 聊天机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017-04-09</title>
      <link href="/2017/04/09/2017-04-09/"/>
      <url>/2017/04/09/2017-04-09/</url>
      
        <content type="html"><![CDATA[<p>今天没看什么新东西,心情依然不好<br><a id="more"></a><br>心情不好这种事情不用写我也知道,就不多说了,流水账写一下今天整了点什么东西吧</p><ul><li>明天上班估计还是拆前端的项目,目前大概功能是可以了,但是功能都不是我写的,来来回回调用要改的地方太多,已知manage下面起码牵扯到三个模块…这个需要协助了</li><li>爬虫框架怎么用大概是知道了,不过爬虫的业务逻辑这一块还有很多东西比较麻烦</li></ul><ol><li>要分析要爬的网站请求怎么提交</li><li>目标元素的选择器</li><li>提取逻辑</li></ol><p>慢慢看吧</p><ul><li>hexo-git-backup插件一直提交不上去,终于发现是换了电脑以后ssh没有配置正确…</li><li>改了一下next的vendor,看看能不能提高一点访问速度</li><li>准备买显示器回来装逼,想了想还是不买4K了,毕竟没有独显,又不想买那么贵的,以后再说吧</li><li>整理了一下博客的分类,省的乱七八糟的自己也看不懂</li><li>开始看了一下聊天机器人的东西,NLTK什么的,用起来算是简单的吧,难的是后面的部分,也算是起步了…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
          <category> 吐槽 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python开发环境的一些配置</title>
      <link href="/2017/04/08/python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/04/08/python%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%80%E4%BA%9B%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>本来只是想学习一下Scrapy怎么做爬虫，顺便爬点东西😄<br>结果发现之前想装robot framework的时候遇到的问题重现了……正好整理一下<br>因为brew什么的没用过，所以参考的<a href="https://havee.me/mac/2014-05/individual-scheme-for-pip.html" title="参考链接" target="_blank" rel="noopener">原文</a>里面有一部分我没写进来，以后用到了再看<br><a id="more"></a></p><h1 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h1><p>下载pip文件<br><a href="https://bootstrap.pypa.io/get-pip.py" title="pip下载地址" target="_blank" rel="noopener">下载地址</a><br>然后执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装pip,可能是需要管理员权限的</span></span><br><span class="line">$ sudo python get-pip.py</span><br><span class="line"><span class="comment"># 安装完pip之后安装virtualenv</span></span><br><span class="line">$ sudo pip install virtualenv</span><br><span class="line"><span class="comment"># 然后用virtualenv创建虚拟环境</span></span><br><span class="line">$ virtualenv ENV</span><br><span class="line"><span class="comment"># 切换至ENV路径后开启虚拟环境</span></span><br><span class="line">$ <span class="built_in">source</span> bin/activate</span><br><span class="line"><span class="comment"># To undo these changes to your path (and prompt), just run:</span></span><br><span class="line"><span class="comment"># 撤销改变?暂时不是很理解</span></span><br><span class="line">$ deactivate</span><br></pre></td></tr></table></figure><p>之后就可以在虚拟环境里面为所欲为了吧，据说是和外部的python环境互不影响的，因为Mac操作系统的原因有一些包没有办法正常安装，我也不想去改系统权限，这个方案目前看起来不错</p><h1 id="pip的User-Install"><a href="#pip的User-Install" class="headerlink" title="pip的User Install"></a>pip的User Install</h1><p>在使用pip安装包的时候加上user参数，可以避免因为mac系统安全性限制导致的一些安装失败，不过需要修改pip的配置和系统的环境变量，这里也记一下吧，难保会不会用到</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python安装命令</span></span><br><span class="line">$ python setup.py install --user</span><br><span class="line"><span class="comment"># 或者下面的命令也可以</span></span><br><span class="line"><span class="comment"># python setup.py install --home=&lt;dir&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pip也一样</span></span><br><span class="line">$ pip install package --user</span><br></pre></td></tr></table></figure><p>但是这样安装的包因为不在系统默认的PATH中，装是可以装，但是不能用，需要改一下环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开配置文件，不存在的话新建一个</span></span><br><span class="line">$ vim ~/.bash_profile</span><br><span class="line"><span class="comment"># 添加如下的配置</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="variable">$HOME</span>/Library/Python/2.7/bin ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">export</span> PATH=<span class="variable">$HOME</span>/Library/Python/2.7/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 应用环境变量的修改</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>修改pip的配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">$ mkdir -p ~/.pip</span><br><span class="line"><span class="comment"># 看了一下touch是创建空文件的命令，用vim代替一样吧</span></span><br><span class="line">$ touch ~/.pip/pip.conf</span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">$ vim ~/.pip/pip.conf</span><br><span class="line"><span class="comment"># pip.conf文件添加如下配置</span></span><br><span class="line">[global]</span><br><span class="line">default-timeout = 60</span><br><span class="line">download-cache = ~/.pip/cache</span><br><span class="line"><span class="built_in">log</span>-file = ~/.pip/pip.log</span><br><span class="line"></span><br><span class="line">[install]</span><br><span class="line"><span class="comment"># 这个地方可以配pip源，这个是豆瓣的，试了一下国内两个源，包都不全，尽量还是翻墙拿吧</span></span><br><span class="line"><span class="comment"># 注意需要在地址后加/simple</span></span><br><span class="line">index-url = http://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><h1 id="pip源地址"><a href="#pip源地址" class="headerlink" title="pip源地址"></a>pip源地址</h1><p>记录一下pip源的地址，万一以后用到了省的到处找</p><ul><li>清华:<a href="https://pypi.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/</a></li><li>豆瓣:<a href="http://pypi.douban.com/" target="_blank" rel="noopener">http://pypi.douban.com/</a></li><li>华中理工大学:<a href="http://pypi.hustunique.com/" target="_blank" rel="noopener">http://pypi.hustunique.com/</a></li><li>山东理工大学:<a href="http://pypi.sdutlinux.org/" target="_blank" rel="noopener">http://pypi.sdutlinux.org/</a></li><li>中国科学技术大学:<a href="http://pypi.mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> python </category>
          
          <category> 环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy入门</title>
      <link href="/2017/04/08/Scrapy%E5%85%A5%E9%97%A8/"/>
      <url>/2017/04/08/Scrapy%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>心比较乱，工作上也有很多东西要做，比较烦，领导之前说那个事情还没什么思路，先做个爬虫试试吧，打发无聊时光<br>这里看到了yield关键字,python的东西还是不熟,百度了一下大概有个概念,慢慢研究,先放个<a href="http://www.jianshu.com/p/d09778f4e055" title="彻底理解Python中的yield" target="_blank" rel="noopener">链接</a>mark一下</p><a id="more"></a><h1 id="最简单的爬网页"><a href="#最简单的爬网页" class="headerlink" title="最简单的爬网页"></a>最简单的爬网页</h1><p>先贴一段代码，简单的没什么好讲</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></span><br><span class="line">    page = urllib2.urlopen(url)</span><br><span class="line">    html=page.read()</span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line">url=<span class="string">"https://hisashiburidane.github.io"</span></span><br><span class="line">html=getHtml(url)</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><h1 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a>Scrapy</h1><p>百度了一下接下来应该怎么做，无非先拉数据，然后使用正则或者其他手段把目标数据提取出来，之后要能自动翻页之类的，能够持续拉<br>说起来简单，获取网页内容只需要第一步那几行代码，然后就要仔细琢磨一下怎么做了，百度的结果是用<a href="https://scrapy.org/" title="Scrapy官网" target="_blank" rel="noopener">Scrapy</a>这个框架的比较多，先简单学习一下吧<br><img src="scrapy_architecture_02.png" alt="input"><br>看完文档又踩了好多坑……现在开始补充<br>顺着文档看下来，<code>pip install</code>按说应该很简单啊，可是OSX下面安装就是出了一堆问题，比如系统权限了，还有一个什么系统保护机制了，不能在usr和etc这种目录下装东西……看了一圈，一种解决办法是配置pip安装路径，装在当前用户的目录下，要改一堆配置文件<br>最后决定要采用的是<a href="https://virtualenv.pypa.io" title="visualenv官网" target="_blank" rel="noopener">virtualenv</a>，因为不用这么麻烦……<br>写在一起太乱了，放个链接<a href="/2017/04/08/python开发环境的一些配置/" title="python开发环境的一些配置">python开发环境的一些配置</a></p><h2 id="Scrapy安装"><a href="#Scrapy安装" class="headerlink" title="Scrapy安装"></a>Scrapy安装</h2><p>搞定了虚拟环境，就可以开始安装配置Scrapy了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境目录(?暂时这样叫吧)</span></span><br><span class="line">$ visualenv ENV</span><br><span class="line"><span class="comment"># 切换至虚拟环境</span></span><br><span class="line">$ <span class="built_in">source</span> ENV/bin/activate</span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">$ deactivate</span><br><span class="line"><span class="comment"># pip安装</span></span><br><span class="line">$ pip install Scrapy</span><br><span class="line"><span class="comment"># 创建名为tutorial的scrapy项目</span></span><br><span class="line">$ scrapy startproject tutorial</span><br></pre></td></tr></table></figure><h2 id="Scrapy-Tuurtorial"><a href="#Scrapy-Tuurtorial" class="headerlink" title="Scrapy Tuurtorial"></a>Scrapy Tuurtorial</h2><p>下面是<a href="https://docs.scrapy.org/en/latest/intro/tutorial.html" title="Scrapy官网Tutorial" target="_blank" rel="noopener">Scrapy官网Tutorial</a>给出的教程中的代码</p><h3 id="抓取网页"><a href="#抓取网页" class="headerlink" title="抓取网页"></a>抓取网页</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        urls = [</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Saved file %s'</span> % filename)</span><br></pre></td></tr></table></figure><p>之后在tutorial目录下执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy crawl quotes</span><br><span class="line"><span class="comment"># This command runs the spider with name quotes that we’ve just added, that will send some requests for the quotes.toscrape.com domain. You will get an output similar to this:</span></span><br><span class="line">... (omitted <span class="keyword">for</span> brevity)</span><br><span class="line">2016-12-16 21:24:05 [scrapy.core.engine] INFO: Spider opened</span><br><span class="line">2016-12-16 21:24:05 [scrapy.extensions.logstats] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</span><br><span class="line">2016-12-16 21:24:05 [scrapy.extensions.telnet] DEBUG: Telnet console listening on 127.0.0.1:6023</span><br><span class="line">2016-12-16 21:24:05 [scrapy.core.engine] DEBUG: Crawled (404) &lt;GET http://quotes.toscrape.com/robots.txt&gt; (referer: None)</span><br><span class="line">2016-12-16 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/1/&gt; (referer: None)</span><br><span class="line">2016-12-16 21:24:05 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/2/&gt; (referer: None)</span><br><span class="line">2016-12-16 21:24:05 [quotes] DEBUG: Saved file quotes-1.html</span><br><span class="line">2016-12-16 21:24:05 [quotes] DEBUG: Saved file quotes-2.html</span><br><span class="line">2016-12-16 21:24:05 [scrapy.core.engine] INFO: Closing spider (finished)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>Scrapy schedules the scrapy.Request objects returned by the start_requests method of the Spider. Upon receiving a response for each one, it instantiates Response objects and calls the callback method associated with the request (in this case, the parse method) passing the response as argument.</p></blockquote><p>这时候ENV目录下保存了两个html文件<code>quotes-1.html</code>,<code>quotes-2.html</code>,这就是爬下来的东西了</p><p>接下来是一个简化的实现</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes_shortcut"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self,response)</span>:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        finename = <span class="string">'quotes_shortcut-%s.html'</span> % page</span><br><span class="line">        <span class="keyword">with</span> open(finename,<span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure><blockquote><p>The parse() method will be called to handle each of the requests for those URLs, even though we haven’t explicitly told Scrapy to do so. This happens because parse() is Scrapy’s default callback method, which is called for requests without an explicitly assigned callback.</p></blockquote><p>看了一下,这一段大概是为了说明parse是scrapy的默认回调函数,不需要下面这一段代码指定也会被默认调用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br></pre></td></tr></table></figure><h3 id="CSSSelector提取数据"><a href="#CSSSelector提取数据" class="headerlink" title="CSSSelector提取数据"></a>CSSSelector提取数据</h3><p>然后是讲scrapy如何提取数据的</p><h4 id="extract-method"><a href="#extract-method" class="headerlink" title=".extract() method"></a>.extract() method</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># scrapy shell</span></span><br><span class="line">$ scrapy shell <span class="string">'http://quotes.toscrape.com/page/1/'</span></span><br><span class="line"><span class="comment"># 执行完毕之后看到如下输出</span></span><br><span class="line">[ ... Scrapy <span class="built_in">log</span> here ... ]</span><br><span class="line">2016-09-19 12:09:27 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://quotes.toscrape.com/page/1/&gt; (referer: None)</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x7fa91d888c90&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET http://quotes.toscrape.com/page/1/&gt;</span><br><span class="line">[s]   response   &lt;200 http://quotes.toscrape.com/page/1/&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x7fa91d888c10&gt;</span><br><span class="line">[s]   spider     &lt;DefaultSpider <span class="string">'default'</span> at 0x7fa91c8af990&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   shelp()           Shell <span class="built_in">help</span> (<span class="built_in">print</span> this <span class="built_in">help</span>)</span><br><span class="line">[s]   fetch(req_or_url) Fetch request (or URL) and update <span class="built_in">local</span> objects</span><br><span class="line">[s]   view(response)    View response <span class="keyword">in</span> a browser</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="comment"># 接下来可以在scrapy shell中进行一些命令操作</span></span><br><span class="line"><span class="comment"># css selector</span></span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'tittle'</span>)</span><br><span class="line">[&lt;Selector xpath=u<span class="string">'descendant-or-self::title'</span> data=u<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>&gt;]</span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'tittle::text'</span>)</span><br><span class="line">[&lt;Selector xpath=u<span class="string">'descendant-or-self::title/text()'</span> data=u<span class="string">'Quotes to Scrape'</span>&gt;]</span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'title::text'</span>).extract()</span><br><span class="line">[u<span class="string">'Quotes to Scrape'</span>]</span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'title'</span>).extract()</span><br><span class="line">[u<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>]</span><br><span class="line"><span class="comment"># extract()方法处理的是一个selectorList实例,如果只想要第一个结果可以如下操作</span></span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'title::text'</span>).extract_first()</span><br><span class="line">u<span class="string">'Quotes to Scrape'</span></span><br><span class="line"><span class="comment"># 也可以像数组一样写</span></span><br><span class="line"><span class="comment"># 使用.extract_first()方法在数组长度为0(没有找到对应选择器的元素)的时候可以返回None而不是引发索引错误</span></span><br><span class="line"><span class="comment"># However, using .extract_first() avoids an IndexError and returns None when it doesn’t find any element matching the selection.</span></span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'title::text'</span>)[0].extract()</span><br><span class="line">u<span class="string">'Quotes to Scrape'</span></span><br></pre></td></tr></table></figure><h4 id="regular-expressions"><a href="#regular-expressions" class="headerlink" title="regular expressions"></a>regular expressions</h4><blockquote><p>Besides the extract() and extract_first() methods, you can also use the re() method to extract using regular expressions:</p></blockquote><p>正则表达式提取数据</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'Quotes.*'</span>)</span><br><span class="line">[u<span class="string">'Quotes to Scrape'</span>]</span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'Q\w+'</span>)</span><br><span class="line">[u<span class="string">'Quotes'</span>]</span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'title::text'</span>).re(r<span class="string">'(\w+) to (\w+)'</span>)</span><br><span class="line">[u<span class="string">'Quotes'</span>, <span class="string">'Scrape'</span>]</span><br></pre></td></tr></table></figure><p>为了验证提取到的数据是否正确,可以调用<code>view(response)</code>方法打开浏览器,在开发者工具中查看页面元素</p><h3 id="XPath提取数据"><a href="#XPath提取数据" class="headerlink" title="XPath提取数据"></a>XPath提取数据</h3><p>这一块之前在做selenium的端对端测试的时候有一点点了解,可以用的时候再百度</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; response.xpath(<span class="string">'//title'</span>)</span><br><span class="line">[&lt;Selector xpath=<span class="string">'//title'</span> data=u<span class="string">'&lt;title&gt;Quotes to Scrape&lt;/title&gt;'</span>&gt;]</span><br><span class="line">&gt;&gt;&gt; response.xpath(<span class="string">'//title/text()'</span>).extract_first()</span><br><span class="line">u<span class="string">'Quotes to Scrape'</span></span><br></pre></td></tr></table></figure><blockquote><p>XPath expressions are very powerful, and are the foundation of Scrapy Selectors. In fact, CSS selectors are converted to XPath under-the-hood. You can see that if you read closely the text representation of the selector objects in the shell.</p></blockquote><p>这里说XPath是CSSSelector的基础,意思是更强大了</p><h3 id="这里讲如何提取最终的目标数据"><a href="#这里讲如何提取最终的目标数据" class="headerlink" title="这里讲如何提取最终的目标数据"></a>这里讲如何提取最终的目标数据</h3><p>这篇教程中的目的是从网站中抓取作品和作者数据,我猜是用正则🙄<br>抓到的网站数据格式如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quote"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text"</span>&gt;</span>“The world as we have created it is a process of our</span><br><span class="line">    thinking. It cannot be changed without changing our thinking.”<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        by <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"author"</span>&gt;</span>Albert Einstein<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/author/Albert-Einstein"</span>&gt;</span>(about)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tags"</span>&gt;</span></span><br><span class="line">        Tags:</span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tag"</span> <span class="attr">href</span>=<span class="string">"/tag/change/page/1/"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tag"</span> <span class="attr">href</span>=<span class="string">"/tag/deep-thoughts/page/1/"</span>&gt;</span>deep-thoughts<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tag"</span> <span class="attr">href</span>=<span class="string">"/tag/thinking/page/1/"</span>&gt;</span>thinking<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"tag"</span> <span class="attr">href</span>=<span class="string">"/tag/world/page/1/"</span>&gt;</span>world<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里重新打开scrapy shell</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy shell <span class="string">'http://quotes.toscrape.com'</span></span><br><span class="line"><span class="comment"># 使用CSSSelector获取到了所有的div.quote元素对象</span></span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">"div.quote"</span>)</span><br><span class="line"><span class="comment"># quote现在就是第一个元素对象</span></span><br><span class="line">&gt;&gt;&gt; quote=response.css(<span class="string">"div.quote"</span>)[0]</span><br><span class="line">&gt;&gt;&gt; quote</span><br><span class="line">&lt;Selector xpath=u<span class="string">"descendant-or-self::div[@class and contains(concat(' ', normalize-space(@class), ' '), ' quote ')]"</span> data=u<span class="string">'&lt;div class="quote" itemscope itemtype="h'</span>&gt;</span><br><span class="line"><span class="comment"># 然后根据quote的元素去查找下面的元素</span></span><br><span class="line">&gt;&gt;&gt; title = quote.css(<span class="string">"span.text::text"</span>).extract_first()</span><br><span class="line">&gt;&gt;&gt; title</span><br><span class="line">u<span class="string">'\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d'</span></span><br><span class="line">&gt;&gt;&gt; author = quote.css(<span class="string">"small.author::text"</span>).extract_first()</span><br><span class="line">&gt;&gt;&gt; author</span><br><span class="line"><span class="string">'Albert Einstein'</span></span><br><span class="line">&gt;&gt;&gt; tags = quote.css(<span class="string">"div.tags a.tag::text"</span>).extract()</span><br><span class="line">&gt;&gt;&gt; tags</span><br><span class="line">[u<span class="string">'change'</span>, u<span class="string">'deep-thoughts'</span>, u<span class="string">'thinking'</span>, u<span class="string">'world'</span>]</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">"div.quote"</span>):</span><br><span class="line">...     text=quote.css(<span class="string">"span.text::text"</span>).extract_first()</span><br><span class="line">...     author=quote.css(<span class="string">"small.author::text"</span>).extract_first()</span><br><span class="line">...     tags=quote.css(<span class="string">"div.tags a.tag::text"</span>).extract()</span><br><span class="line">...     <span class="built_in">print</span>(dict(text=text,author=author,tags=tags))</span><br><span class="line">...</span><br><span class="line">&#123;<span class="string">'text'</span>: u<span class="string">'\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d'</span>, <span class="string">'tags'</span>: [u<span class="string">'change'</span>, u<span class="string">'deep-thoughts'</span>, u<span class="string">'thinking'</span>, u<span class="string">'world'</span>], <span class="string">'author'</span>: u<span class="string">'Albert Einstein'</span>&#125;</span><br><span class="line">&#123;<span class="string">'text'</span>: u<span class="string">'\u201cIt is our choices, Harry, that show what we truly are, far more than our abilities.\u201d'</span>, <span class="string">'tags'</span>: [u<span class="string">'abilities'</span>, u<span class="string">'choices'</span>], <span class="string">'author'</span>: u<span class="string">'J.K. Rowling'</span>&#125;</span><br><span class="line">... a few more of these, omitted <span class="keyword">for</span> brevity</span><br></pre></td></tr></table></figure><h3 id="在Spider中提取数据"><a href="#在Spider中提取数据" class="headerlink" title="在Spider中提取数据"></a>在Spider中提取数据</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes_extract"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>运行程序看输出,大概就是下面这样</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy crawl quotes_extract</span><br><span class="line">...</span><br><span class="line">2017-04-08 22:00:06 [scrapy.core.scraper] DEBUG: Scraped from &lt;200 http://quotes.toscrape.com/page/1/&gt;</span><br><span class="line">&#123;<span class="string">'text'</span>: u<span class="string">'\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d'</span>, <span class="string">'tags'</span>: [u<span class="string">'change'</span>, u<span class="string">'deep-thoughts'</span>, u<span class="string">'thinking'</span>, u<span class="string">'world'</span>], <span class="string">'author'</span>: u<span class="string">'Albert Einstein'</span>&#125;</span><br><span class="line">2017-04-08 22:00:06 [scrapy.core.scraper] DEBUG: Scraped from &lt;200 http://quotes.toscrape.com/page/1/&gt;</span><br><span class="line">&#123;<span class="string">'text'</span>: u<span class="string">'\u201cIt is our choices, Harry, that show what we truly are, far more than our abilities.\u201d'</span>, <span class="string">'tags'</span>: [u<span class="string">'abilities'</span>, u<span class="string">'choices'</span>], <span class="string">'author'</span>: u<span class="string">'J.K. Rowling'</span>&#125;</span><br><span class="line">...</span><br><span class="line"><span class="comment"># 输出json文件</span></span><br><span class="line">$ scrapy crawl quotes_extract -o quotes_extract.json</span><br><span class="line"><span class="comment"># 输出jl文件</span></span><br><span class="line">$ scrapy crawl quotes_extract -o quotes_extract.jl</span><br></pre></td></tr></table></figure><blockquote><p>The JSON Lines format is useful because it’s stream-like, you can easily append new records to it. It doesn’t have the same problem of JSON when you run twice. Also, as each record is a separate line, you can process big files without having to fit everything in memory, there are tools like JQ to help doing that at the command-line.</p></blockquote><p>这里终端和上面的输出是一样的,只是把数据保存在了json文件里,随便列几条看看效果就行了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;<span class="attr">"text"</span>: <span class="string">"\u201cThe world as we have created it is a process of our thinking. It cannot be changed without changing our thinking.\u201d"</span>, <span class="attr">"author"</span>: <span class="string">"Albert Einstein"</span>, <span class="attr">"tags"</span>: [<span class="string">"change"</span>, <span class="string">"deep-thoughts"</span>, <span class="string">"thinking"</span>, <span class="string">"world"</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">"text"</span>: <span class="string">"\u201cIt is our choices, Harry, that show what we truly are, far more than our abilities.\u201d"</span>, <span class="attr">"author"</span>: <span class="string">"J.K. Rowling"</span>, <span class="attr">"tags"</span>: [<span class="string">"abilities"</span>, <span class="string">"choices"</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">"text"</span>: <span class="string">"\u201cThere are only two ways to live your life. One is as though nothing is a miracle. The other is as though everything is a miracle.\u201d"</span>, <span class="attr">"author"</span>: <span class="string">"Albert Einstein"</span>, <span class="attr">"tags"</span>: [<span class="string">"inspirational"</span>, <span class="string">"life"</span>, <span class="string">"live"</span>, <span class="string">"miracle"</span>, <span class="string">"miracles"</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">"text"</span>: <span class="string">"\u201cThe person, be it gentleman or lady, who has not pleasure in a good novel, must be intolerably stupid.\u201d"</span>, <span class="attr">"author"</span>: <span class="string">"Jane Austen"</span>, <span class="attr">"tags"</span>: [<span class="string">"aliteracy"</span>, <span class="string">"books"</span>, <span class="string">"classic"</span>, <span class="string">"humor"</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">"text"</span>: <span class="string">"\u201cImperfection is beauty, madness is genius and it's better to be absolutely ridiculous than absolutely boring.\u201d"</span>, <span class="attr">"author"</span>: <span class="string">"Marilyn Monroe"</span>, <span class="attr">"tags"</span>: [<span class="string">"be-yourself"</span>, <span class="string">"inspirational"</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">"text"</span>: <span class="string">"\u201cTry not to become a man of success. Rather become a man of value.\u201d"</span>, <span class="attr">"author"</span>: <span class="string">"Albert Einstein"</span>, <span class="attr">"tags"</span>: [<span class="string">"adulthood"</span>, <span class="string">"success"</span>, <span class="string">"value"</span>]&#125;,</span><br><span class="line">...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>In small projects (like the one in this tutorial), that should be enough. However, if you want to perform more complex things with the scraped items, you can write an Item Pipeline. A placeholder file for Item Pipelines has been set up for you when the project is created, in tutorial/pipelines.py. Though you don’t need to implement any item pipelines if you just want to store the scraped items.</p></blockquote><p>这个是管道了,这部分回头再看吧,今天先到这里.么有效率…</p><h3 id="如何持续查找所有网页"><a href="#如何持续查找所有网页" class="headerlink" title="如何持续查找所有网页"></a>如何持续查找所有网页</h3><p>这里应该就是找到”下一页”的标记,然后无限向下直到没有下一页为止,也没什么难度,指定选择器而已.<br>下面是quotes网站的下一页元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/page/2/"</span>&gt;</span>Next <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;rarr;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>shell里面先看看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy shell <span class="string">'http://quotes.toscrape.com/'</span></span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line">u<span class="string">'/page/2/'</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes_next"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).extract(),</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="comment"># 从相对路径获取页面的绝对路径</span></span><br><span class="line">            <span class="comment"># http://quotes.toscrape.com/page/1/</span></span><br><span class="line">            <span class="comment"># /page/2/</span></span><br><span class="line">            <span class="comment"># 拼起来就是http://quotes.toscrape.com/page/2/这样</span></span><br><span class="line">            next_page = response.urljoin(next_page)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</span><br></pre></td></tr></table></figure><blockquote><p>What you see here is Scrapy’s mechanism of following links: when you yield a Request in a callback method, Scrapy will schedule that request to be sent and register a callback method to be executed when that request finishes.</p></blockquote><p>scrapy回调parse的时候会触发next_page下面的<code>scrapy.Request(next_page, callback=self.parse)</code>代码,循环直到<code>next_page=None</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'quotes_author'</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># follow links to author pages</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.author + a::attr(href)'</span>).extract():</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(response.urljoin(href),</span><br><span class="line">                                 callback=self.parse_author)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># follow pagination links</span></span><br><span class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            next_page = response.urljoin(next_page)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_author</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extract_with_css</span><span class="params">(query)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> response.css(query).extract_first().strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'name'</span>: extract_with_css(<span class="string">'h3.author-title::text'</span>),</span><br><span class="line">            <span class="string">'birthdate'</span>: extract_with_css(<span class="string">'.author-born-date::text'</span>),</span><br><span class="line">            <span class="string">'bio'</span>: extract_with_css(<span class="string">'.author-description::text'</span>),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这一段是先加载页面之后拿到所有的作者的链接,然后在parse中新建scrapy.Request()请求,触发parse_author回调,在作者页面中拿到作者信息<br>我在想这个东西会不会一不小心搞成递归了…</p><blockquote><p>Another interesting thing this spider demonstrates is that, even if there are many quotes from the same author, we don’t need to worry about visiting the same author page multiple times. By default, Scrapy filters out duplicated requests to URLs already visited, avoiding the problem of hitting servers too much because of a programming mistake. This can be configured by the setting DUPEFILTER_CLASS.</p></blockquote><p>话说这是自带防止递归的功能?框架果然是好东西,急人之所急啊</p><h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes_tags"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = <span class="string">'http://quotes.toscrape.com/'</span></span><br><span class="line">        tag = getattr(self, <span class="string">'tag'</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> tag <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            url = url + <span class="string">'tag/'</span> + tag</span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url, self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).extract_first(),</span><br><span class="line">                <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).extract_first(),</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).extract_first()</span><br><span class="line">        <span class="keyword">if</span> next_page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            next_page = response.urljoin(next_page)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(next_page, self.parse)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes_tags -o quotes_tags.json -a tag=humor</span><br></pre></td></tr></table></figure><p>最终获取的结果只有humor类型的</p><blockquote><p>You can learn more about <a href="https://docs.scrapy.org/en/latest/topics/spiders.html#spiderargs" title="spider-arguments" target="_blank" rel="noopener">handling spider arguments here</a>.</p></blockquote><p>今天就到这里,消化一下.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> spider </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac命令</title>
      <link href="/2017/03/09/Mac%E5%91%BD%E4%BB%A4/"/>
      <url>/2017/03/09/Mac%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>也说不上是手贱吧,反正是买了台低配MBP,有些东西还是要记一下的<br><a id="more"></a></p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><h2 id="允许从任意来源安装应用"><a href="#允许从任意来源安装应用" class="headerlink" title="允许从任意来源安装应用"></a>允许从任意来源安装应用</h2><p>允许从任何来源安装应用,有些软件包安装的时候权限不足会安装失败,需要用到,记得安装完毕回复</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure><h2 id="关闭system-integrity-protection"><a href="#关闭system-integrity-protection" class="headerlink" title="关闭system integrity protection"></a>关闭system integrity protection</h2><p>买了台显示器,分辨率默认不适配HiDPI,下了个软件也改不好,提示需要关闭System Intergrity Protection<br>重启电脑,按住command+R键进入恢复模式,调出终端<br>操作完了记得恢复,毕竟是系统保护功能</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭sip</span></span><br><span class="line">csrutil <span class="built_in">disable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开sip</span></span><br><span class="line">csrutil <span class="built_in">enable</span></span><br></pre></td></tr></table></figure><h2 id="关于”xxxx-xx已被OS-X使用-无法打开”的问题"><a href="#关于”xxxx-xx已被OS-X使用-无法打开”的问题" class="headerlink" title="关于”xxxx.xx已被OS X使用,无法打开”的问题"></a>关于”xxxx.xx已被OS X使用,无法打开”的问题</h2><p>说道这里不得不感慨自己的贫穷,硬盘不够移动的来凑,装了个双系统来回倒腾,不知道怎么就会导致移动硬盘里面一些文件无法打开,<code>zip/rar</code>文件无法解压,百度很久有一个[方法][关于“xx.xx已被OS X使用，无法打开”的问题]可行…</p><blockquote><p>Mac电脑上的文件拷贝到移动硬盘，有时候会出现“xx.xx已被OS X使用，无法打开”的问题。<br>解决办法：</p><p>1、打开终端(或在Mac搜索里面输入Terminal);</p><p>2、在终端里输入 xattr -l ，然后把出问题的文件拖动到 “xattr -l 后面”,回车；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;Sayonara-MacBook-Pro:~ liudongmeng$ xattr -l</span><br><span class="line">&gt;Sayonara-MacBook-Pro:S1 liudongmeng$ xattr -l 1_1310389850k0Hh.zip</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>3、然后，第一行会有 com.apple.FinderInfo 这串字符。复制这串字符，回车</p><p>例如:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt;Sayonara-MacBook-Pro:S1 liudongmeng$ xattr -l 1_1310389850k0Hh.zip</span><br><span class="line">&gt;com.apple.FinderInfo:</span><br><span class="line">&gt;00000000  62 72 6F 6B 4D 41 43 53 00 00 00 00 00 00 00 00  |brokMACS........|</span><br><span class="line">&gt;00000010  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  |................|</span><br><span class="line">&gt;00000020</span><br><span class="line">&gt;com.apple.metadata:kMDItemWhereFroms:</span><br><span class="line">&gt;00000000  62 70 6C 69 73 74 30 30 A2 01 02 5F 10 45 68 74  |bplist00..._.Eht|</span><br><span class="line">&gt;00000010  74 70 3A 2F 2F 72 65 6E 72 65 6E 2E 6D 61 6F 79  |tp://renren.maoy|</span><br><span class="line">&gt;00000020  75 6E 2E 74 76 2F 66 74 70 2F 61 74 74 61 63 68  |un.tv/ftp/attach|</span><br><span class="line">&gt;00000030  6D 65 6E 74 2F 32 30 31 31 30 37 2F 31 31 2F 31  |ment/201107/11/1|</span><br><span class="line">&gt;00000040  5F 31 33 31 30 33 38 39 38 35 30 6B 30 48 68 2E  |_1310389850k0Hh.|</span><br><span class="line">&gt;00000050  7A 69 70 5F 10 1A 68 74 74 70 3A 2F 2F 7A 6D 7A  |zip_..http://zmz|</span><br><span class="line">&gt;00000060  30 30 31 2E 63 6F 6D 2F 73 2F 4B 64 57 39 37 33  |001.com/s/KdW973|</span><br><span class="line">&gt;00000070  08 0B 53 00 00 00 00 00 00 01 01 00 00 00 00 00  |..S.............|</span><br><span class="line">&gt;00000080  00 00 03 00 00 00 00 00 00 00 00 00 00 00 00 00  |................|</span><br><span class="line">&gt;00000090  00 00 70                                         |..p|</span><br><span class="line">&gt;00000093</span><br><span class="line">&gt;com.apple.quarantine: 0081;5a6c2976;Chrome;8EF54D09-8C0A-4E6F-9BE0-15C8A1B945A9</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>4、接下来，输入新的命令 xattr -d com.apple.FinderInfo 再把问题文件拖进去，问题就解决了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;Sayonara-MacBook-Pro:S1 liudongmeng$ xattr -d com.apple.FinderInfo 1_1310389850k0Hh.zip</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p>先空着,这个东西常用的用多了就记得了</p><h1 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h1><p>[Awesome Mac][Awesome Mac]看起来不错,慢慢拉<br>[Awesome Mac]: <a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="noopener">https://github.com/jaywcjlove/awesome-mac</a> “Awesome Mac”<br>[关于“xx.xx已被OS X使用，无法打开”的问题]: <a href="https://www.cnblogs.com/xiu619544553/p/5270200.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiu619544553/p/5270200.html</a> “关于“xx.xx已被OS X使用，无法打开”的问题”</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> 随便记点什么 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Robot-Framework+selenium</title>
      <link href="/2017/03/09/robot-framework-selenium/"/>
      <url>/2017/03/09/robot-framework-selenium/</url>
      
        <content type="html"><![CDATA[<p>用selenium写了点东西，看到了robot-framework这么个东西，感觉还是有点用的，虽然也没想做的太深入，但是还是想搭一下。<br>结果没有搭起来，其实准备做这件事情的原因，和最终草草放弃的原因是同一个，呵呵。<br><a id="more"></a></p><h2 id="安装brew"><a href="#安装brew" class="headerlink" title="安装brew"></a>安装brew</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/<span class="built_in">local</span> --strip 1</span><br></pre></td></tr></table></figure><h2 id="安装wxpython"><a href="#安装wxpython" class="headerlink" title="安装wxpython"></a>安装wxpython</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install wxpython</span><br><span class="line">brew info wxpython</span><br></pre></td></tr></table></figure><h2 id="安装phantomJS"><a href="#安装phantomJS" class="headerlink" title="安装phantomJS"></a>安装phantomJS</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> selenium </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenTSDB的安装部署及简单使用</title>
      <link href="/2017/01/28/OpenTSDB%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2017/01/28/OpenTSDB%E7%9A%84%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>部署流程，其实部署东西大都不难，呵呵。<br><a id="more"></a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先看官方文档，需要linux系统+Java Runtime+HBase+GnuPlot<br>linux系统不说了，java运行时是因为程序是用java编写的，HBase是最终的底层存储系统。GnuPlot其实不装也可以，只是web端绘图的时候要调用，没有不影响基础功能<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runtime Requirements</span><br><span class="line">To actually run OpenTSDB, you'll need to meet the following:</span><br><span class="line"></span><br><span class="line">A Linux<span class="keyword"> system</span> (or Windows with manual building)</span><br><span class="line">Java Runtime Environment 1.6<span class="built_in"> or </span>later</span><br><span class="line">HBase 0.92<span class="built_in"> or </span>later</span><br><span class="line">GnuPlot 4.2<span class="built_in"> or </span>later</span><br></pre></td></tr></table></figure></p><p>之前安装Hadoop的时候已经安装了jdk，设置了JAVA_HOME，所以这里从hbase开始</p><h2 id="安装HBase"><a href="#安装HBase" class="headerlink" title="安装HBase"></a>安装HBase</h2><p>首先<a href="http://hbase.apache.org/" title="hbase.apache.org" target="_blank" rel="noopener">官网</a>下载程序包<code>hbase-1.2.4-bin.tar.gz</code>和md5校验文件<code>hbase-1.2.4-bin.tar.gz.mds</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ssh hadoop@192.168.2.128</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/stable/hbase-1.2.4-bin.tar.gz</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/hbase/stable/hbase-1.2.4-bin.tar.gz.mds</span><br><span class="line">md5sum hbase-1.2.4-bin.tar.gz | tr <span class="string">'a-z'</span> <span class="string">'A-Z'</span> <span class="comment">#查看文件的md5值，检查文件是否完整</span></span><br></pre></td></tr></table></figure></p><p>然后解压到<code>/usr/local/</code>路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf hbase-1.2.4-bin.tar.gz</span><br><span class="line">su</span><br><span class="line">mv hbase-1.2.4 /usr/<span class="built_in">local</span>/hbase</span><br></pre></td></tr></table></figure></p><p>切换到目录，修改<code>conf/hbase-site.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.rootdir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:///usr/local/hbase<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--value&gt;hdfs://192.168.2.128:9000/user/hadoop/hbase&lt;/value--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/zookeeper<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>修改环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="variable">$HBASE_HOME</span>=/usr/<span class="built_in">local</span>/hbase</span><br></pre></td></tr></table></figure></p><p>启动<code>start-hbase.sh</code>,打开<a href="http://192.168.2.128:16010/" target="_blank" rel="noopener">http://192.168.2.128:16010/</a> 查看启动是否成功。能够打开web页面说明启动成功，暂时到此为止<br>zookeeper要通过hbase启动，如果手动打开了hbase则会报错</p><hr><h2 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/apache/</span>zookeeper<span class="regexp">/stable/</span>zookeeper-<span class="number">3.4</span>.<span class="number">9</span>.tar.gz</span><br><span class="line">tar -zxvf zookeeper-<span class="number">3.4</span>.<span class="number">9</span>.tar.gz</span><br><span class="line">mv zookeeper-<span class="number">3.4</span>.<span class="number">9</span> <span class="regexp">/usr/</span>local<span class="regexp">/zookeeper</span></span><br></pre></td></tr></table></figure><p>创建配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure></p><p>启动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/zkServer.sh start <span class="comment">#启动服务</span></span><br><span class="line">./bin/zkServer.sh stop <span class="comment">#停止服务</span></span><br></pre></td></tr></table></figure></p><p>修改环境变量<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="variable">$ZK_HOME</span>=/usr/<span class="built_in">local</span>/zookeeper</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> OpenTSDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenTSDB </tag>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从头开始搭建Hadoop环境</title>
      <link href="/2017/01/27/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhadoop%E7%8E%AF%E5%A2%83/"/>
      <url>/2017/01/27/%E4%BB%8E%E5%A4%B4%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAhadoop%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>放假在家没什么事情，从头整理一下之前搭的环境，有些当时看起来似是而非的东西现在看起来就明确了很多，为了部落……<br><a id="more"></a></p><h1 id="首先安装server版本的ubuntu虚拟机"><a href="#首先安装server版本的ubuntu虚拟机" class="headerlink" title="首先安装server版本的ubuntu虚拟机"></a>首先安装server版本的ubuntu虚拟机</h1><p>因为是装作虚拟机用，所以要尽可能的节省资源，图形界面什么的就不要了，这一步我之前已经做好了，也比较简单，暂时不写</p><h1 id="相关的环境"><a href="#相关的环境" class="headerlink" title="相关的环境"></a>相关的环境</h1><p><a href="http://www.powerxing.com/install-hadoop/" title="Hadoop安装教程_单机/伪分布式配置_Hadoop2.6.0/Ubuntu14.04" target="_blank" rel="noopener">参考文章</a></p><h2 id="openssh"><a href="#openssh" class="headerlink" title="openssh"></a>openssh</h2><p>ubuntu默认已经装好了openssh-server，没有装的话<code>sudo apt-get install openssh-server</code>就可以了<br>然后是配置</p><h3 id="虚拟机改为桥接"><a href="#虚拟机改为桥接" class="headerlink" title="虚拟机改为桥接"></a>虚拟机改为桥接</h3><p><img src="Bridge.png" alt="Bridge"><br>输入<code>ifconfig</code>查看虚拟机的ip</p><h3 id="测试连接"><a href="#测试连接" class="headerlink" title="测试连接"></a>测试连接</h3><p><code>ssh user@xxx.xxx.xxx.xxx</code>,根据提示连接即可</p><h2 id="创建hadoop用户"><a href="#创建hadoop用户" class="headerlink" title="创建hadoop用户"></a>创建hadoop用户</h2><p>创建用户<br><code>sudo useradd -m hadoop -s /bin/sh</code><br>修改密码<br><code>sudo passwd hadoop</code><br>将用户添加至管理员<br><code>sudo adduser hadoop sudo</code><br>初始化root用户密码(用户需要具备管理员权限)<br><code>sudo passwd</code><br>在本地生成ssh-keygen<br><code>ssh-keygen</code><br>将keygen上传到服务器，之后就可以直接ssh命令登陆而不用输入密码了<br><code>ssh-copy-id user@xxx.xxx.xxx.xxx</code></p><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><p>试了一下，1.7版本的openjdk不能跑，装1.8的<br><code>sudo apt-get install openjdk-8-jre openjdk-8-jdk</code><br>安装完成后输入<code>java -version</code>查看版本<br>输入<code>dpkg -L openjdk-7-jdk | grep &#39;/bin/javac&#39;</code>查看安装路径<br>这里不知道为啥没输出，直接查看<code>dpkg -L openjdk-8-jdk</code></p><h2 id="JAVA-HOME"><a href="#JAVA-HOME" class="headerlink" title="JAVA_HOME"></a>JAVA_HOME</h2><p><code>vim ~/.shrc</code>添加<code>export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/</code><br>之后执行<code>source ~/.shrc</code>使修改生效<br>输入<code>$JAVA_HOME/bin/java -version</code>查看jdk版本，如果能正常输出，则说明环境变量配置正确</p><h1 id="安装hadoop"><a href="#安装hadoop" class="headerlink" title="安装hadoop"></a>安装hadoop</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>到<a href="http://hadoop.apache.org/releases.html" title="hadoop.apache.org" target="_blank" rel="noopener">官网</a>下载后利用scp命令上传到服务器<br><code>scp hadoop-2.7.3.tar.gz hadoop@192.168.2.128: ~/</code><br>校验md5<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat ~/下载/hadoop-2.6.0.tar.gz.mds | grep <span class="string">'MD5'</span> <span class="comment"># 列出md5检验值</span></span><br><span class="line"><span class="comment"># head -n 6 ~/下载/hadoop-2.7.1.tar.gz.mds # 2.7.1版本格式变了，可以用这种方式输出</span></span><br><span class="line">md5sum ~/下载/hadoop-2.6.0.tar.gz | tr <span class="string">"a-z"</span> <span class="string">"A-Z"</span> <span class="comment"># 计算md5值，并转化为大写，方便比较</span></span><br></pre></td></tr></table></figure></p><p>解压<code>tar -zxvf hadoop-2.7.3.tar.gz</code><br>移动到/usr/local路径<code>mv hadoop-2.7.3 /usr/local/hadoop</code><br>查看hadoop版本<code>./bin/hadoop version</code><br>查看官方例子<code>./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.7.3.jar</code><br>wordcount<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/hadoop</span><br><span class="line">mkdir ./input</span><br><span class="line">cp ./etc/hadoop/*.xml ./input   <span class="comment"># 将配置文件作为输入文件</span></span><br><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep ./input ./output <span class="string">'dfs[a-z.]+'</span></span><br><span class="line">cat ./output/*          <span class="comment"># 查看运行结果</span></span><br></pre></td></tr></table></figure></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>修改配置文件<code>gedit ./etc/hadoop/core-site.xml</code><br>修改为<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">description</span>&gt;</span>Abase for other temporary directories.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://192.168.2.128:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同样的，修改配置文件 hdfs-site.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置完成后，执行 NameNode 的格式化:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs namenode -format</span><br></pre></td></tr></table></figure></p><p>启动进程<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure></p><p>HADOOP环境变量配置(非必需)<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/<span class="built_in">local</span>/hadoop</span><br><span class="line"><span class="built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="variable">$HADOOP_HOME</span>/lib/native</span><br></pre></td></tr></table></figure></p><p>无法启动的解决办法<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 针对 DataNode 没法启动的解决方法</span></span><br><span class="line">./sbin/stop-dfs.sh   <span class="comment"># 关闭</span></span><br><span class="line">rm -r ./tmp     <span class="comment"># 删除 tmp 文件，注意这会删除 HDFS 中原有的所有数据</span></span><br><span class="line">./bin/hdfs namenode -format   <span class="comment"># 重新格式化 NameNode</span></span><br><span class="line">./sbin/start-dfs.sh  <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure></p><p>成功启动后，可以访问 Web 界面 <a href="http://192.168.2.128:50070" target="_blank" rel="noopener">http://192.168.2.128:50070</a> 查看 NameNode 和 Datanode 信息，还可以在线查看 HDFS 中的文件。</p><h2 id="运行伪分布式实例"><a href="#运行伪分布式实例" class="headerlink" title="运行伪分布式实例"></a>运行伪分布式实例</h2><p>上面的单机模式，grep 例子读取的是本地数据，伪分布式读取的则是 HDFS 上的数据。要使用 HDFS，首先需要在 HDFS 中创建用户目录：<br><code>./bin/hdfs dfs -mkdir -p /user/hadoop</code><br>接着将 ./etc/hadoop 中的 xml 文件作为输入文件复制到分布式文件系统中，即将 /usr/local/hadoop/etc/hadoop 复制到分布式文件系统中的 /user/hadoop/input 中。我们使用的是 hadoop 用户，并且已创建相应的用户目录 /user/hadoop ，因此在命令中就可以使用相对路径如 input，其对应的绝对路径就是 /user/hadoop/input:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -mkdir input</span><br><span class="line">./bin/hdfs dfs -put ./etc/hadoop/*.xml input</span><br></pre></td></tr></table></figure></p><p>复制完成后，可以通过如下命令查看文件列表：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -ls input</span><br></pre></td></tr></table></figure></p><p>伪分布式运行 MapReduce 作业的方式跟单机模式相同，区别在于伪分布式读取的是HDFS中的文件（可以将单机步骤中创建的本地 input 文件夹，输出结果 output 文件夹都删掉来验证这一点）。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep input output <span class="string">'dfs[a-z.]+'</span></span><br></pre></td></tr></table></figure></p><p>查看运行结果的命令（查看的是位于 HDFS 中的输出结果）：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -cat output/*</span><br></pre></td></tr></table></figure></p><p>我们也可以将运行结果取回到本地：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -r ./output    <span class="comment"># 先删除本地的 output 文件夹（如果存在）</span></span><br><span class="line">./bin/hdfs dfs -get output ./output     <span class="comment"># 将 HDFS 上的 output 文件夹拷贝到本机</span></span><br><span class="line">cat ./output/*</span><br></pre></td></tr></table></figure></p><p>Hadoop 运行程序时，输出目录不能存在，否则会提示错误 “org.apache.hadoop.mapred.FileAlreadyExistsException: Output directory hdfs://192.168.2.128:9000/user/hadoop/output already exists” ，因此若要再次执行，需要执行如下命令删除 output 文件夹:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs -rm -r output    <span class="comment"># 删除 output 文件夹</span></span><br></pre></td></tr></table></figure></p><h3 id="运行程序时，输出目录不能存在"><a href="#运行程序时，输出目录不能存在" class="headerlink" title="运行程序时，输出目录不能存在"></a>运行程序时，输出目录不能存在</h3><p>运行 Hadoop 程序时，为了防止覆盖结果，程序指定的输出目录（如 output）不能存在，否则会提示错误，因此运行前需要先删除输出目录。在实际开发应用程序时，可考虑在程序中加上如下代码，能在每次运行时自动删除输出目录，避免繁琐的命令行操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Configuration conf = <span class="keyword">new</span> Configuration();</span><br><span class="line">Job job = <span class="keyword">new</span> Job(conf);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除输出目录 */</span></span><br><span class="line">Path outputPath = <span class="keyword">new</span> Path(args[<span class="number">1</span>]);</span><br><span class="line">outputPath.getFileSystem(conf).delete(outputPath, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></p><p>若要关闭 Hadoop，则运行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./sbin/stop-dfs.sh</span><br></pre></td></tr></table></figure></p><h2 id="启动YARN"><a href="#启动YARN" class="headerlink" title="启动YARN"></a>启动YARN</h2><p>伪分布式不启动 YARN 也可以，一般不会影响程序执行）</p><p>有的读者可能会疑惑，怎么启动 Hadoop 后，见不到书上所说的 JobTracker 和 TaskTracker，这是因为新版的 Hadoop 使用了新的 MapReduce 框架（MapReduce V2，也称为 YARN，Yet Another Resource Negotiator）。</p><p>YARN 是从 MapReduce 中分离出来的，负责资源管理与任务调度。YARN 运行于 MapReduce 之上，提供了高可用性、高扩展性，YARN 的更多介绍在此不展开，有兴趣的可查阅相关资料。</p><p>上述通过 ./sbin/start-dfs.sh 启动 Hadoop，仅仅是启动了 MapReduce 环境，我们可以启动 YARN ，让 YARN 来负责资源管理与任务调度。</p><p>首先修改配置文件 mapred-site.xml，这边需要先进行重命名：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv ./etc/hadoop/mapred-site.xml.template ./etc/hadoop/mapred-site.xml</span><br></pre></td></tr></table></figure></p><p>然后再进行编辑，同样使用 gedit 编辑会比较方便些 gedit ./etc/hadoop/mapred-site.xml ：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接着修改配置文件 yarn-site.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后就可以启动 YARN 了（需要先执行过 ./sbin/start-dfs.sh）：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./sbin/start-yarn.sh      <span class="comment"># 启动YARN</span></span><br><span class="line">./sbin/mr-jobhistory-daemon.sh start historyserver  <span class="comment"># 开启历史服务器，才能在Web中查看任务运行情况</span></span><br></pre></td></tr></table></figure></p><p>启动 YARN 之后，运行实例的方法还是一样的，仅仅是资源管理方式、任务调度不同。观察日志信息可以发现，不启用 YARN 时，是 “mapred.LocalJobRunner” 在跑任务，启用 YARN 之后，是 “mapred.YARNRunner” 在跑任务。启动 YARN 有个好处是可以通过 Web 界面查看任务的运行情况：<a href="http://192.168.2.128:8088/cluster" target="_blank" rel="noopener">http://192.168.2.128:8088/cluster</a><br>但 YARN 主要是为集群提供更好的资源管理与任务调度，然而这在单机上体现不出价值，反而会使程序跑得稍慢些。因此在单机上是否开启 YARN 就看实际情况了。</p><p><code>如果不想启动 YARN，务必把配置文件 mapred-site.xml 重命名，改成 mapred-site.xml.template，需要用时改回来就行。否则在该配置文件存在，而未开启 YARN 的情况下，运行程序会提示 “Retrying connect to server: 0.0.0.0/0.0.0.0:8032” 的错误，这也是为何该配置文件初始文件名为 mapred-site.xml.template。</code><br>关闭YARN的脚本如下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./sbin/stop-yarn.sh</span><br><span class="line">./sbin/mr-jobhistory-daemon.sh stop historyserver</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ubuntu </tag>
            
            <tag> hadoop </tag>
            
            <tag> hdfs </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven淘宝镜像配置</title>
      <link href="/2017/01/14/maven%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/01/14/maven%E6%B7%98%E5%AE%9D%E9%95%9C%E5%83%8F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>修改<code>settings.xml</code>文件中的镜像配置即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> maven </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SparkStreaming</title>
      <link href="/2017/01/12/SparkStreaming/"/>
      <url>/2017/01/12/SparkStreaming/</url>
      
        <content type="html"><![CDATA[<p>公司是想通过类似MySQL-&gt;Yelp-&gt;Kafka-&gt;Spark Streaming-&gt;OpenTSDB的结构搭一套框架,然后一步一步来吧<br>每个部分单独实现接口肯定是没问题的,无非就是Java/Python/WebAPI或者其他接口封装一下,问题是怎么用最简单的方法把这一套串起来<br>啃文档啃文档啃文档…<br>linux/java/maven/python/english每一项都是弱项,结果对文档的理解进度很慢…<br>花了三四天才用官方的example把kafka的数据直接接入了spark streaming<br>最近看的东西也是太多太散,本身自己其实只是根据文档做了个测试,命令都还记不住…整理一下吧<br><a id="more"></a></p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><p><a href="http://spark.apache.org/streaming/" title="SparkStreaming" target="_blank" rel="noopener">官方网站</a>下载最新的Pre-build版本，解压就可以直接跑了<br><a href="http://spark.apache.org/downloads.html" title="Download page" target="_blank" rel="noopener">下载页面</a></p><h1 id="源代码编译"><a href="#源代码编译" class="headerlink" title="源代码编译"></a>源代码编译</h1><p>这就不得不看一下maven的问题了<br>maven根据配置自动下依赖包的功能是很方便，然而GFW面前都是浮云，百度之后找到了<a href="http://mirrors.aliyun.com/" title="感谢马云爸爸" target="_blank" rel="noopener">淘宝镜像站</a><br>修改<code>settings.xml</code>文件中的镜像<a href="./maven淘宝镜像配置" title="link">配置</a>即可<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="编译命令"><a href="#编译命令" class="headerlink" title="编译命令"></a>编译命令</h2><p>网上搜下来有两种，第一种是<code>./build/mvn</code><br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build/mvn -Pyarn -Phadoop<span class="number">-2.7</span> -Dhadoop.version=<span class="number">2.7</span><span class="number">.0</span> -DskipTests clean package</span><br></pre></td></tr></table></figure></p><p>然后一种是用脚本把编译后的项目打包出来<br>第一种做法看不懂怎么用,还是太多东西不懂,先用起来……所以这里采用第二种</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">./make-distribution.sh</span> <span class="params">--tgz</span> <span class="params">--name</span> 2.7.0 -Pyarn -Phadoop-2.7 -Phive</span><br></pre></td></tr></table></figure><p>先编了一次,提示有错误,生成文件<code>spark-[WARNING] The requested profile &quot;hive&quot; could not be activated because it does not exist.-bin-2.7.0.tgz</code>,大概是hive没有安装?参数去掉再编一次,生成成功</p><p>然后根据官方的<a href="http://spark.apache.org/docs/latest/streaming-programming-guide.html#linking" title="LinkSection" target="_blank" rel="noopener">LinkSection</a>和自己的需要添加dependency,编译完成之后相关的依赖包也会打在生成的文件里面.<br>因为公司是要把kafka的数据直接接到spark streaming里面,这里我添加了kafka的依赖,其实后来想想自己到<a href="http://search.maven.org/" title="Maven repository" target="_blank" rel="noopener">Maven repository</a>上面手动搜包下载就好了…在这里浪费了很长时间</p><h2 id="数据接入例子"><a href="#数据接入例子" class="headerlink" title="数据接入例子"></a>数据接入例子</h2><p>简单说一下我这次是怎么做的</p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>启动Kafka服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup bin/kafka-server-start.sh config/server.properties &amp;</span><br></pre></td></tr></table></figure></p><p>新建名为test的topic<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</span><br></pre></td></tr></table></figure></p><p>启动kafka producer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/kafka-console-producer.sh --broker-t localhost:9092 --topic test</span><br></pre></td></tr></table></figure></p><p>到这里kafka这边基本都好了</p><h3 id="启动Spark-Streaming程序"><a href="#启动Spark-Streaming程序" class="headerlink" title="启动Spark Streaming程序"></a>启动Spark Streaming程序</h3><p>首先把需要用到的kafka包拷到Spark的路径下,然后找到官方的direct_kafka_wordcount.py文件,或者直接自己写一个<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"> Counts words in UTF8 encoded, '\n' delimited text directly received from Kafka in every 2 seconds.</span></span><br><span class="line"><span class="string"> Usage: direct_kafka_wordcount.py &lt;broker_list&gt; &lt;topic&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> To run this on your local machine, you need to setup Kafka and create a producer first, see</span></span><br><span class="line"><span class="string"> http://kafka.apache.org/documentation.html#quickstart</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> and then run the example</span></span><br><span class="line"><span class="string">    `$ bin/spark-submit --jars \</span></span><br><span class="line"><span class="string">      external/kafka-assembly/target/scala-*/spark-streaming-kafka-assembly-*.jar \</span></span><br><span class="line"><span class="string">      examples/src/main/python/streaming/direct_kafka_wordcount.py \</span></span><br><span class="line"><span class="string">      localhost:9092 test`</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> pyspark.streaming <span class="keyword">import</span> StreamingContext</span><br><span class="line"><span class="keyword">from</span> pyspark.streaming.kafka <span class="keyword">import</span> KafkaUtils</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">3</span>:</span><br><span class="line">        print(<span class="string">"Usage: direct_kafka_wordcount.py &lt;broker_list&gt; &lt;topic&gt;"</span>, file=sys.stderr)</span><br><span class="line">        exit(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    sc = SparkContext(appName=<span class="string">"PythonStreamingDirectKafkaWordCount"</span>)</span><br><span class="line">    ssc = StreamingContext(sc, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    brokers, topic = sys.argv[<span class="number">1</span>:]</span><br><span class="line">    kvs = KafkaUtils.createDirectStream(ssc, [topic], &#123;<span class="string">"metadata.broker.list"</span>: brokers&#125;)</span><br><span class="line">    lines = kvs.map(<span class="keyword">lambda</span> x: x[<span class="number">1</span>])</span><br><span class="line">    counts = lines.flatMap(<span class="keyword">lambda</span> line: line.split(<span class="string">" "</span>)) \</span><br><span class="line">        .map(<span class="keyword">lambda</span> word: (word, <span class="number">1</span>)) \</span><br><span class="line">        .reduceByKey(<span class="keyword">lambda</span> a, b: a+b)</span><br><span class="line">    counts.pprint()</span><br><span class="line"></span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br></pre></td></tr></table></figure></p><p>然后就是执行下列命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-submit --jars ./external/kafka-0-8-assembly/target/spark-streaming-kafka-0-8-assembly_2.11-2.1.0.jar direct_kafka_wordcount.py 192.168.0.106:9092 test</span><br></pre></td></tr></table></figure></p><p>这句很长,要确保引用的jar包路径正确无误,然后就是python代码文件路径正确,命令结构大概是<code>spark-submit --jars jarSource codeSource host:port topic</code>这样</p><p>跑起来没有自动退出,就说明是命令正确可以被执行了,但是这里默认会输出大量的INFO日志,先修改一下日志的配置为WARN<br>切换到conf目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp log4j.properties.template log4j.properties</span><br><span class="line">vim log4j.properties #修改配置,重启服务即可</span><br></pre></td></tr></table></figure></p><p>重新执行,应该是像这样<br><img src="python.png" alt="python"><br>程序这就算是跑起来了,在生产者里面输入的数据会进入spark streaming进行处理,显示结果大概是这样<br>输入<br><img src="input.png" alt="input"><br>输出<br><img src="output.png" alt="output"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Spark </category>
          
          <category> SparkStreaming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> Streaming </tag>
            
            <tag> Spark Streaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows系统下Hexo的安装和配置</title>
      <link href="/2017/01/10/windows%E7%B3%BB%E7%BB%9F%E4%B8%8BHEXO%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/01/10/windows%E7%B3%BB%E7%BB%9F%E4%B8%8BHEXO%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>根据网上的各路教程把Hexo搭起来了，难度其实不高，但是要用好还是要多练习多思考，先整理一下我搭建博客的过程，省得改天又百度各种网页……<br><a id="more"></a></p><h1 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h1><p>首先引用作者wsgzao的<a href="https://wsgzao.github.io/post/hexo-guide/" title="使用GitHub和Hexo搭建免费静态Blog" target="_blank" rel="noopener">原文</a><br>然后是阮一峰的<a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" title="搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门 by ruanyifeng" target="_blank" rel="noopener">文章</a><br>Hexo的<a href="https://hexo.io/" title="hexo.io" target="_blank" rel="noopener">官网</a><br>后来发现简书上面一篇文章写的也很不错，mark一下改天来完善一下我的笔记<a href="http://www.jianshu.com/p/858ecf233db9" title="Andrew_liu:通过Hexo在Github上搭建博客教程" target="_blank" rel="noopener">Andrew_liu:通过Hexo在Github上搭建博客教程</a><br><a href="http://blog.csdn.net/shenshanlaoyuan/article/details/52774473" title="Hexo博客增加留言板功能" target="_blank" rel="noopener">留言板</a><br><a href="https://www.zhihu.com/question/38797520?sort=created" title="知乎" target="_blank" rel="noopener">留言板来自知乎的回答</a><br><a href="http://www.xbool.com/article-not-show-home/" title="hexo文章设置首页不显示技巧" target="_blank" rel="noopener">hexo文章设置首页不显示技巧</a></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p><a href="https://nodejs.org/en/" title="NodeJS" target="_blank" rel="noopener">下载</a>安装就行了，具体过程记不得了，好像是装上就行，环境变量自己就配好了，有机会再搭一次的话确认一下……</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>装好Node.js之后用npm命令安装hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo --save</span><br><span class="line">#如果命令无法运行，可以尝试更换taobao的npm源</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>安装成功之后，切换到指定路径，初始化Hexo项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">#安装完成之后该路径下会出现一个完整的hexo项目，可以通过命令进行操作，不过很多操作依赖于插件</span><br><span class="line">#安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</span><br><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br><span class="line"></span><br><span class="line">#新建完成后，指定文件夹的目录如下</span><br><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── scripts</span><br><span class="line">├── source</span><br><span class="line">|      ├── _drafts</span><br><span class="line">|      └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><h2 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h2><p>通过插件可以实现自动生成静态页面、自动打包发布等功能<br>这里有一个问题，就是将一个全新的hexo项目通过hexo d命令发布至github可能会把原有的项目全删了……没想清楚是什么原理，还需要慢慢摸索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-category --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-deployer-heroku --save</span><br><span class="line">npm install hexo-deployer-rsync --save</span><br><span class="line">npm install hexo-deployer-openshift --save</span><br><span class="line">npm install hexo-renderer-marked@0.2 --save</span><br><span class="line">npm install hexo-renderer-stylus@0.2 --save</span><br><span class="line">npm install hexo-generator-feed@1 --save</span><br><span class="line">npm install hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure></p><p>常用命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g #根据md文件生成静态页面</span><br><span class="line">hexo d #根据_config.yml文件中配置的信息，将静态页面发布到github指定项目</span><br><span class="line">hexo n &quot;title&quot; #生成文章，生成md文件，路径在_posts文件夹下</span><br><span class="line">hexo s #本地启动服务(port:4000)，可以直接预览md文件的修改</span><br></pre></td></tr></table></figure></p><h2 id="部署静态网页到GitHub"><a href="#部署静态网页到GitHub" class="headerlink" title="部署静态网页到GitHub"></a>部署静态网页到<a href="https://github.com/" title="GitHub" target="_blank" rel="noopener">GitHub</a></h2><hr><p>注册帐号，之后创建<code>New repository</code>，name和用户名保持一致，例如<code>username.github.io</code><br>第一次部署上去之后一直访问不到，以为是代码有问题，或者是网站延迟，后来发现是网站需要审核10分钟左右，之后每次提交完成之后如果没有错误就可以直接看到更新内容</p><h3 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h3><p>我这个人也是比较懒，每次都要<code>git add .</code> <code>git commit -m &quot;xxx&quot;</code> <code>git push origin master</code> 也是嫌麻烦，所以现在在用<code>hexo d</code>自动部署，关于项目怎么在不同服务器上同步的问题还在考虑，用github感觉速度是个问题</p><h3 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h3><p>这个感觉用起来很方便，每次<code>hexo g d</code>，等发布完成就好了<br>打开Hexo项目路径下的<code>_config.yml</code>文件，修改如下配置就可以了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h1 id="Markdown资料"><a href="#Markdown资料" class="headerlink" title="Markdown资料"></a>Markdown资料</h1><p>之前在公司写wiki时接触了类似的东西，感觉挺好用，不过用的比较生疏<br>网上找的<a href="http://www.appinn.com/markdown/" title="网上找的Markdown文档" target="_blank" rel="noopener">Markdown</a>语法链接，放这里慢慢学习整理</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随便写点啥</title>
      <link href="/2017/01/09/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E5%95%A5/"/>
      <url>/2017/01/09/%E9%9A%8F%E4%BE%BF%E5%86%99%E7%82%B9%E5%95%A5/</url>
      
        <content type="html"><![CDATA[<p>感觉还是挺好用的，不过需要熟悉，现在的问题是怎么能在不同的地方用hexo的自动部署功能而又不被冲掉数据<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java opentsdb &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><h4 id="试试链接"><a href="#试试链接" class="headerlink" title="试试链接"></a>试试链接</h4><p>This is <a href="http://www.baidu.com/" title="baidu" target="_blank" rel="noopener">百度</a> inline link.</p><p><a href="http://www.baidu.com/" title="百度" target="_blank" rel="noopener">百度</a> has no title attribute.</p><p>参考式链接</p><p>This is <a href="http://www.baidu.com/" title="Optional Title Here" target="_blank" rel="noopener">参考式链接1</a> reference-style link.</p><p>This is <a href="http://www.baidu.com/" title="Optional Title Here" target="_blank" rel="noopener">参考式链接2</a> reference-style link.</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java写入OpenTSDB</title>
      <link href="/2017/01/07/java/"/>
      <url>/2017/01/07/java/</url>
      
        <content type="html"><![CDATA[<hr><h4 id="放个链接"><a href="#放个链接" class="headerlink" title="放个链接"></a><em>放个链接</em></h4><p><a href="https://hisashiburidane.github.io">GitBlog</a></p><h1 id="其实我就是先练习练习Markdown"><a href="#其实我就是先练习练习Markdown" class="headerlink" title="其实我就是先练习练习Markdown"></a>其实我就是先练习练习Markdown</h1><a id="more"></a><p>OpenTSDB用webapi还是觉得有点性能问题，试一下java api，写入成功，明天写个循环测一下性能<br>linux环境下java的编译还要多用用，还要改环境变量好麻烦……<br>还有几个问题需要翻一下源代码</p><ol><li>在服务器上localhost环境可以写入hbase，但是到其他机器上怎么调，配置文件应该是有体现，顺着构造函数往下看<br>这个问题已经解决了<br><code># 注意在winodws下的 C:\Windows\System32\drivers\etc\hosts文件中添加服务器端host与ip的映射关系如： 10.8.1.135 master</code></li><li>之前webapi调用post数据的时候，数据长度超过限制之后会导致连接关闭，服务端报的是netty的错误，也要翻一下看能不能解决，毕竟webapi调起来比较简单，13k/s应该还远没到极限    <h2 id="修改环境变量"><a href="#修改环境变量" class="headerlink" title="修改环境变量"></a>修改环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><h2 id="内容修改"><a href="#内容修改" class="headerlink" title="内容修改"></a>内容修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PROJECT_HOME=~/bo</span><br><span class="line">for loop in `ls $PROJECT_HOME/*.jar`;do</span><br><span class="line">export CLASSPATH=$&#123;loop&#125;:$&#123;CLASSPATH&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><blockquote><p>引用</p></blockquote><h2 id="调用addPoint代码"><a href="#调用addPoint代码" class="headerlink" title="调用addPoint代码"></a>调用addPoint代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> net.opentsdb.core.TSDB;</span><br><span class="line"><span class="keyword">import</span> net.opentsdb.utils.Config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">opentsdb</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                String path=<span class="string">"opentsdb.conf"</span>;</span><br><span class="line">                Config config=<span class="keyword">new</span> Config(path);</span><br><span class="line">                TSDB db= <span class="keyword">new</span> TSDB(config);</span><br><span class="line">                String metric= <span class="string">"mysql.bytes_received"</span>;</span><br><span class="line">                <span class="keyword">long</span> timeStamp =<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">long</span> value=<span class="number">1</span>;</span><br><span class="line">                Map&lt;String, String&gt; tags= <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">                hmap.put(<span class="string">"host"</span>, <span class="string">"web04"</span>);</span><br><span class="line">                db.addPoint(metric, timeStamp, value,tags);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过配置文件实例化对象<br><code>TSDB db= new TSDB(config);</code></p><hr><h2 id="编译-调用"><a href="#编译-调用" class="headerlink" title="编译/调用"></a>编译/调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javac opentsdb.java</span><br><span class="line">java opentsdb</span><br></pre></td></tr></table></figure><h2 id="实验一个表格，没有现成的，先放个例子，回头有的时候再做"><a href="#实验一个表格，没有现成的，先放个例子，回头有的时候再做" class="headerlink" title="实验一个表格，没有现成的，先放个例子，回头有的时候再做"></a>实验一个表格，没有现成的，先放个例子，回头有的时候再做</h2><blockquote><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> OpenTSDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenTSDB-2</title>
      <link href="/2017/01/06/OpenTSDB-2/"/>
      <url>/2017/01/06/OpenTSDB-2/</url>
      
        <content type="html"><![CDATA[<p>测试OpenTSDB的WebApi接口，表示不会写JS很是费劲，好不容易百度了ajax的写法，又遇到跨域问题和post数据大小的限制……这个破烂页面记一下，以后遇到要post数据的地方可以来这里翻<br><a id="more"></a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./jquery-1.10.2.min.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        $("button").click(function () &#123;</span><br><span class="line">            var uri="http://128.1.10.20:4242/api/put?summary";</span><br><span class="line">            var i = 0;</span><br><span class="line">            var j = 0;</span><br><span class="line">            var start = new Date();</span><br><span class="line">            document.getElementById("start").innerHTML = (start).toLocaleTimeString() + start.getMilliseconds();</span><br><span class="line">            while (i++ &lt; 10000) &#123;</span><br><span class="line">                $.ajax(&#123;</span><br><span class="line">                    type: "POST",</span><br><span class="line">                    url: uri,</span><br><span class="line">                    contentType: "application/json; charset=utf-8",</span><br><span class="line">                    data: JSON.stringify(&#123;</span><br><span class="line">    "metric": "mysql.bytes_received",</span><br><span class="line">    "timestamp": i,</span><br><span class="line">    "value": 1,</span><br><span class="line">    "tags": &#123;</span><br><span class="line">       "host": "web01",</span><br><span class="line">    &#125;</span><br><span class="line">&#125;),</span><br><span class="line">                    dataType: "json",</span><br><span class="line">                    success: function (message) &#123;</span><br><span class="line">                        //alert(message.StatusCode==200?"Success":"Failed");</span><br><span class="line">                        document.getElementById("count").innerHTML = (message.success == 1 ? j++ : alert( JSON.stringify(message)));</span><br><span class="line">                        document.getElementById("end").innerHTML = (end).toLocaleTimeString() + end.getMilliseconds();</span><br><span class="line">                        //message.StatusCode==200?alert("第"+i+"条数据成功"):null;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    error: function (message) &#123;</span><br><span class="line">                        $("#request-process-patent").html("提交数据失败！");</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            var end = new Date();</span><br><span class="line">            document.getElementById("end").innerHTML = (end).toLocaleTimeString() + end.getMilliseconds();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">开始时间<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"start"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span>成功次数<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">结束时间<span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"end"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>向页面发送 HTTP POST 请求，并获得返回的结果<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>OpenTSDB服务器启动操作</title>
      <link href="/2017/01/06/OpenTSDB-1/"/>
      <url>/2017/01/06/OpenTSDB-1/</url>
      
        <content type="html"><![CDATA[<p>公司的虚拟机关了之后OpenTSDB的时候各种报错……折腾了一会儿才想起来基础的Hadoop/Zookeeper/HBase服务貌似没起……<br>启动服务的命令记一下，虽然搞了两次大概记住了<br><a id="more"></a><br>所有操作都在master上进行</p><p>启动Hadoop<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br><span class="line">#mr-jobhistory-daemon.sh start historyserver</span><br></pre></td></tr></table></figure></p><p>启动HBase(自带启动Zookeeper)<br>切换至HBase安装路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/start-hbase-sh</span><br></pre></td></tr></table></figure></p><p>启动OpenTSDB<br>切换至OpenTSDB安装路径(build)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./tsdb tsd</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
          <category> OpenTSDB </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2016/12/11/hello-world/"/>
      <url>/2016/12/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
